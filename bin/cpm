#!/bin/bash
# sed -i -e 's/\r$//' scriptname.sh

AUTHOR=${AUTHOR}
WWW=${WWW:-"/var/www"}
WEB_HOME=${WEB_HOME:-"/var/www/html"}
GITHUB_DOMAIN=${GITHUB_DOMAIN:-'https://github.com'}



# Reads arguments options
function read_application_arguments()
{
    local TEMP=`getopt -o p:: --long data::,name::,version::,users-config::,config-file::,catalina-home::install-dir:: -n "$0" -- "$@"`
    
	eval set -- "$TEMP"
    # extract options and their arguments into variables.
    while true ; do
        case "$1" in
            --data) data=${2%"/"} ; shift 2 ;;
            --name) name=${2} ; shift 2 ;;
            --file-config) config_file=${2:-"$config_file"}; shift 2 ;;
            --version) version=${2:-"$version"}; shift 2 ;;
            --catalina-home) catalina_home=${2:-"$catalina_home"}; shift 2 ;;
            --users-config) users_config=${2:-"$users_config"}; shift 2 ;;
            --install-dir) install_dir=${2:-"$install_dir"}; shift 2 ;;
            # --db-name) DB_NAME=${2:-"$DB_NAME"}; shift 2 ;;
            # --db-user) DB_USER=${2:-"$DB_USER"}; shift 2 ;;
            # --db-password) DB_PASSWORD=${2:-"$DB_PASSWORD"}; shift 2 ;;
            # --db-host) DB_HOST=${2:-"$DB_HOST"}; shift 2 ;;
            # --db-port) DB_PORT=${2:-"$DB_PORT"}; shift 2 ;;
            --) shift ; break ;;
            *) echo "Internal error! $1" ; exit 1 ;;
        esac
    done

    shift $(expr $OPTIND - 1 )
    _parameters=$@
    
  # fi
}
#!/bin/bash

# Install blazegraph


function blazegraph_install() 
{
    set -e
    local version=2.1.5
    local data=
    local name=blazegraph
    local catalina_home=/usr/share/tomcat
    local blazegraph_config=
    local file_config=
    # echo $@

    local _parameters=
    read_application_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi

    if ! getent passwd tomcat > /dev/null 2>&1; then
        tomcat_install
    fi

    # https://nvbach.blogspot.com/2019/04/installing-blazegraph-on-linux-debian.html
    curl -fSL https://github.com/blazegraph/database/releases/download/BLAZEGRAPH_RELEASE_${version//\./_}/blazegraph.war -o ${catalina_home}/webapps/${name}.war

    # # Configure
    # # data=${data:-"$1"}
    # data=${data:-"/var/lib/blazegraph"}
    # data=${data%"/"} 

    # wget https://github.com/blazegraph/database/releases/download/BLAZEGRAPH_RELEASE_2_1_5/blazegraph.rpm
    # sudo yum localinstall blazegraph.rpm
    # ln -s /etc/alternatives/jre  /usr/lib/jvm/default-java

    # mkdir -p /etc/blazegraph/
    # chown tomcat:tomcat -R /etc/blazegraph/
}

## detect if a script is being sourced or not
# if [[ $_ == $0 ]] 
# then
#   blazegraph_install $@
# fi

#!/bin/bash

# Reads arguments options
function parse_elk_arguments()
{
    local TEMP=`getopt -o p:: --long version::,beats:: -n "$0" -- "$@"`
    
	eval set -- "$TEMP"
    # extract options and their arguments into variables.
    while true ; do
        case "$1" in
            --version) version=${2:-"$version"}; shift 2 ;;
            # --tomcat-config) tomcat_config=${2:-"$tomcat_config"}; shift 2 ;;
            --users-config) users_config=${2:-"$users_config"}; shift 2 ;;
            # --db-name) DB_NAME=${2:-"$DB_NAME"}; shift 2 ;;
            # --db-user) DB_USER=${2:-"$DB_USER"}; shift 2 ;;
            # --db-password) DB_PASSWORD=${2:-"$DB_PASSWORD"}; shift 2 ;;
            # --db-host) DB_HOST=${2:-"$DB_HOST"}; shift 2 ;;
            # --db-port) DB_PORT=${2:-"$DB_PORT"}; shift 2 ;;
            --) shift ; break ;;
            *) echo "Internal error! $1" ; exit 1 ;;
        esac
    done

    shift $(expr $OPTIND - 1 )
    _parameters=$@
    
  # fi
}

elk_import_rpm() {
    local version=$1
    echo "[elasticsearch-${version}.x]" > /etc/yum.repos.d/elasticsearch-${version}.x.repo; \
    echo "name=Elasticsearch repository for ${version}.x packages" >> /etc/yum.repos.d/elasticsearch-${version}.x.repo; \
    echo "baseurl=https://artifacts.elastic.co/packages/${version}.x/yum" >> /etc/yum.repos.d/elasticsearch-${version}.x.repo; \
    echo "gpgcheck=1" >> /etc/yum.repos.d/elasticsearch-${version}.x.repo; \
    echo "gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch" >> /etc/yum.repos.d/elasticsearch-${version}.x.repo; \
    echo "enabled=1" >> /etc/yum.repos.d/elasticsearch-${version}.x.repo; \
    echo "autorefresh=1" >> /etc/yum.repos.d/elasticsearch-${version}.x.repo; \
    echo "type=rpm-md" >> /etc/yum.repos.d/elasticsearch-${version}.x.repo
    rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch
}

elk_install_beats() {
    sudo yum install -y filebeat auditbeat metricbeat packetbeat heartbeat-elastic
}

elk_install() {
    local version=7
    local _parameters=
    parse_elk_arguments $@ 
    elk_import_rpm $version
    sudo yum -y install elasticsearch logstash kibana
}

## detect if a script is being sourced or not
# if [[ $_ == $0 ]] 
# then
# 	elk_install "$@"
# fi





#!/bin/bash

# Install fedora commons repository


# # Reads arguments options
# function parse_fcrepo_arguments()
# {
#   # if [ $# -ne 0 ]; then
#     local TEMP=`getopt -o p:: --long data::,name::,version::,users-config::,config-file:: -n "$0" -- "$@"`
#     local TEMP=`getopt -o p:: --long data::,name::,version::,users-config::,config-file::,catalina-home:: -n "$0" -- "$@"`
    
# 	eval set -- "$TEMP"
#     # extract options and their arguments into variables.
#     while true ; do
#         case "$1" in
#             --data) data=${2%"/"} ; shift 2 ;;
#             --name) name=${2} ; shift 2 ;;
#             --file-config) config_file=${2:-"$config_file"}; shift 2 ;;
#             --version) version=${2:-"$version"}; shift 2 ;;
#             --catalina-home) catalina_home=${2:-"$catalina_home"}; shift 2 ;;
#             # --tomcat-config) tomcat_config=${2:-"$tomcat_config"}; shift 2 ;;
#             --users-config) users_config=${2:-"$users_config"}; shift 2 ;;
#             # --db-name) DB_NAME=${2:-"$DB_NAME"}; shift 2 ;;
#             # --db-user) DB_USER=${2:-"$DB_USER"}; shift 2 ;;
#             # --db-password) DB_PASSWORD=${2:-"$DB_PASSWORD"}; shift 2 ;;
#             # --db-host) DB_HOST=${2:-"$DB_HOST"}; shift 2 ;;
#             # --db-port) DB_PORT=${2:-"$DB_PORT"}; shift 2 ;;
#             --) shift ; break ;;
#             *) echo "Internal error! $1" ; exit 1 ;;
#         esac
#     done

#     shift $(expr $OPTIND - 1 )
#     _parameters=$@
    
#   # fi
# }

function fcrepo_install() 
{
    set -e
    local version=4.7.5
    local data=/var/lib/fcrepo
    local name=fcrepo
    local catalina_home=${CATALINA_HOME:-"/usr/share/tomcat"}
    # local DB_PASSWORD=
    # local DB_HOST=localhost
    # local DB_PORT=3306
    local fcrepo_config=
    local file_config=
    # echo $@

    local _parameters=
    read_application_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi

    # name=${name:-"fcrepo-$version"}
    # # data=${data:-"$1"}
    # data=${data:-"/var/lib/$name"}
    # data=${data%"/"} 

    if ! getent passwd tomcat > /dev/null 2>&1; then
        tomcat_install
    fi

    # ENV PATH $CATALINA_HOME/bin:$PATH

    # https://github.com/fcrepo4/fcrepo4/releases/download/fcrepo-5.1.0/fcrepo-webapp-5.1.0.war
    # https://github.com/fcrepo4/fcrepo4/releases/download/fcrepo-4.7.5/fcrepo-webapp-4.7.5.war

    case "$version" in

        "4") version=4.7.5;;

        "5") version=5.1.0;;
        *)
        ;;
    esac
    
    # ARG FCREPO_VERSION=4.7.5
    # ARG FCREPO_TAG=4.7.5
    # ARG FcrepoConfig=
    curl -fSL https://github.com/fcrepo4-exts/fcrepo-webapp-plus/releases/download/fcrepo-webapp-plus-$version/fcrepo-webapp-plus-$fcrepo_config$version.war -o ${catalina_home}/webapps/${name}.war
    #
    local ModeshapeConfig=file-simple
    local JDBCConfig=
  # ARG FCREPO_DIR=${APP_DIR}/fcrepo
    sudo mkdir -p "${data}" && sudo chown tomcat:tomcat -R ${data} 
    sudo echo 'JAVA_OPTS="-Dfcrepo.modeshape.configuration=classpath:/config/'$ModeshapeConfig'/repository.json '$JDBCConfig' -Dfcrepo.home='${data}' -Dfcrepo.audit.container=/audit"' >> /etc/tomcat/tomcat.conf \
    # sudo mv fcrepo-$fcrepo_config$version.war "${catalina_home}/webapps/${name}.war"

    sudo mkdir -p /etc/$name
    sudo chown tomcat:tomcat /etc/$name
}

## detect if a script is being sourced or not
# if [[ $_ == $0 ]] 
# then
#   fcrepo_install $@
# fi

#!/bin/bash



fuseki_install() {
    
    local name=fuseki
    local data=
    local version=3.14.0
    local install_dir=/usr/share
    local catalina_home=${CATALINA_HOME:-"/usr/share/tomcat"}

    local _parameters=
    read_application_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi


    curl -fSL https://archive.apache.org/dist/jena/binaries/apache-jena-fuseki-$version.tar.gz -o apache-jena-fuseki-$version.tar.gz
    tar -xzf apache-jena-fuseki-"$version".tar.gz -C "${install_dir}"
    cp -f "${install_dir}/apache-jena-fuseki-${version}/fuseki.war" "${catalina_home}/webapps/$name.war"


    mkdir -p /etc/$name/configuration
    chown tomcat:tomcat -R /etc/$name
}
#!/bin/bash
#

is_git_url()
{
    http_regex='(https?)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]'
    ssh_regex='[-A-Za-z0-9_@/.]+:[-A-Za-z0-9\+&@#/%?=~_|!:,.;]'
    path_regex='^/|(/[a-zA-Z0-9_-]+)+$'
    string=$1
    if [[ $string =~ $http_regex ]]
    then 
        true
    elif  [[ $string =~ $ssh_regex ]]
    then
        true
    elif  [[ $string =~ $path_regex ]]
    then
        true
    else
        false
    fi
}

# Reads arguments options
parse_git_arguments()
{
  # if [ $# -ne 0 ]; then
    TEMP=`getopt -o b::,r:: --long branch::,tag::,workspace-dir::,framework::,repo_url::,config-dir::,cache-dir::,logs-dir::,name::,repo::,team::,composer-update,workspace -n "$0" -- "$@"`
    eval set -- "$TEMP"
    # extract options and their arguments into variables.
    while true ; do
        case "$1" in
            # -e|--env) _env=${2:-"$_env"} ; shift 2 ;;
            # -p|--path) _path=${2%"/"} ; shift 2 ;;
            # -u|--user) _user=$2 ; shift 2 ;;
            -b|--branch) _branch=${2:-"$_branch"}; shift 2 ;;
            # --framework) _framework=${2:-"$_framework"}; shift 2 ;;
            # --name) _name+=" ${2:-"$_name"}"; shift 2 ;;
            -r|--repo) _repo+=" ${2:-"$_repo"}"; shift 2 ;;
            # --repo_url) _repo_url=$2; shift 2 ;;
            # --config-dir) _config_dir=$2; shift 2 ;;
            # --cache-dir) _cache_dir=$2; shift 2 ;;
            # --logs-dir) _logs_dir=$2; shift 2 ;;
            # --team) _team=${2:-"$_team"}; shift 2 ;;
            --composer-update) _composer=1; shift 1 ;;
            # --workspace) _is_workspace=1; shift 1 ;;
            --) shift ; break ;;
            *) echo "Internal error! $1" ; exit 1 ;;
        esac
    done

    shift $(expr $OPTIND - 1 )
    _parameters=$@

  # fi
}

# git_branch() {
#     git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
# }

##
## Retrieve repository name from git url
git_repo_name()
{
  set -e
  if [ $# -ne 1 ]; then
      echo "Invalid arguments! Usage: $0 git_repo_name  [repo_url]"
      exit 1
  fi
  
  local __repo=${1##*/}
  echo "${__repo%%.*}"
}


# Clone git repository
# usage: 
# cpm git:clone git@github.com:csimeu/cpm.git /path/to/save --branch=v1.0 --composer-update
# cpm git:clone csimeu/cpm /path/to/save --branch=v1.0 --composer-update --domain=github 
# cpm git:clone --repo=csimeu/cpm -d /path/to/save
# cpm git:clone --repo=csimeu/cpm --repo=csimeu/cpm --domain=github 
git_clone()
{
    set -e
    local _params=
    local _branch=
    local _composer=
    # local _is_workspace=0
    # local _team=
    local _path=
    # local _repo=
    # local _workspace_dir=

    parse_git_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi
    
    local repo=$1
    if [[ $repo =~ ^--(.*)$ ]]; then repo=; fi
    if [[ -n "$_repo" ]]; then
        repo=$_repo
    else
        shift 1
    fi
 
    local _pathdest=$1
    if [[ $_pathdest =~ ^--(.*)$ ]]; then _pathdest=; fi
    # if [ -n "$_path" ]; then
    #     _pathdest=$_path
    # fi

    # if [[ -z "$repo" && -n "$_team" ]]; then
    #     repo=${REPOS_LIST[$_team]}
    # fi
    
    if [ -z "$repo" ]; then
        echo "Invalid arguments! Usage: $0 [repo] <pathname> <--branch=v1.0>"
        exit 1
    fi
    
    _branch=${_branch:-'master'}
    # if [ -n "$_branch" ]; then _params+="--branch=$_branch "; fi
    if [ -n "$_env" ]; then _params+="--env=$_env "; fi
    # if [ -n "$_workspace_dir" ]; then _params+="--workspace-dir=$_workspace_dir "; fi
    if [[ $_composer == 1 ]] ; then _params+="--composer-update "; fi
    # if [[ $_is_workspace == 1 ]] ; then _params+="--workspace "; fi
    
    # local _workspace_dir=
    # if [[ -n "$_pathdest" ]]; then
    #     mkdir -p $_pathdest
    # fi

    for repository in $repo
    do
        if ! is_git_url $repository
        then
            repository=$(gitlab_sshUrl $_team $repository)
        fi
        
        # local _pathname=${_pathdest:-"."}/$(git_repo_name $repository)
        echo 
        echo "git clone $repository -b $_branch $_pathdest"
        echo "########################################"
        
        git clone $repository -b $_branch $_pathdest
        local _pathname=${_pathdest}
        if [[ -n "$_pathdest" ]]; then
            _pathname=./$(git_repo_name $repository)
        fi
        
        if [[ $_composer == 1 ]] ; then  
            echo "update composer $_pathname ...";
            composer_update $_pathname $_params ;
        fi
    done
}


# Udapte a git repository branch or tag 
# usage git_update  --branch=v1.0  </path> --composer-update
git_update()
{
  set -e
  local _path=
  local _branch=
  local cmd=
  local _composer=
  local _latest=0
  local _args=$@ 
  # echo $_args
  
  local _parameters=
  parse_arguments $@ 
  set ${_parameters:-"."}

  _path=${_path:-"$1"}
  _path=${_path:-"."}

  # is greater than
  #if [ $# -gt 0 ] then 
  if [ -n "$_path" ] 
  then 
    cd ${_path}
  fi  
  # echo "path $_path"

  
  if [[ $_latest == 1 || _branch == "latest" ]] ; then  
    # echo 'Getting the most recent tag';
    _branch=$(git describe);
  fi

  local current_branch=$(git branch | grep \* | cut -d ' ' -f2);
  if [ -z "$current_branch" ]
  then
      echo failed
      exit 1
  fi

  _branch=${_branch:-"$current_branch"};

  # Check if tag exists
  cmd="git tag | grep -w $_branch"
  if eval $cmd ; 
  then  
    echo 'tag exists';
    git tag -d "$_branch" ;
    cmd="git branch | grep -w $_branch"
    if eval $cmd ;  
    then  
      echo 'branch exist';
      git checkout "master" && git branch -D "$_branch"
    fi
  fi

  git fetch origin && git checkout "$_branch" ;

  cmd="git tag | grep -w $_branch"
  if eval $cmd ; 
  then  
    echo 'tag exists';
    git checkout -b "$_branch" ;
    
  else
    git pull origin $_branch;
  fi

  if [[ $_composer == 1 ]] ; then  
    echo 'update composer';
    composer_update $_args ;
  fi
  # composer_update $webapp_folder
}


# Checks existance of git repository 
git_exists()
{
    # set -e
    if [ $# -eq 0 ]; then
        echo "Invalid arguments! Usage: $0 git_exists [repo_url] "
        exit 1
    fi

    GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no" git ls-remote $1 -q >/dev/null 2>&1
    
    echo $?
}
#!/bin/bash


httpd_install() {
    
    sudo yum install -y httpd mod_ssl mod_wsgi mod_fcgid

    sudo mkdir -p /etc/httpd/sites-enabled
    sudo mkdir -p /etc/httpd/sites-availables
    sudo chown apache:apache -R /etc/httpd/sites-enabled /etc/httpd/sites-availables
    

sudo cat > /etc/httpd/sites-availables/php-fcgi.conf << EOF
# Configure multiple php version
ScriptAlias /cgi-bin/ "/var/www/cgi-bin/"
AddHandler php-fcgi .php
#Action php55-fcgi /cgi-bin/php55.fcgi
#Action php56-fcgi /cgi-bin/php56.fcgi
#Action php71-fcgi /cgi-bin/php71.fcgi
#Action php72-fcgi /cgi-bin/php72.fcgi
#Action php73-fcgi /cgi-bin/php73.fcgi
#Action php74-fcgi /cgi-bin/php74.fcgi
EOF

if [[ "$(rpm -E %{rhel})" == "6"  ]];
then
    sudo chkconfig httpd on
else 
    sudo systemctl enable httpd
fi

}


## detect if a script is being sourced or not
# if [[ $_ == $0 ]] 
# then
# 	httpd_install "$@"
# fi

#!/bin/bash

function keycloak_install() 
{
    set -e

    local version=8.0.1
    # local data=/var/li/fcrepo
    local name=fcrepo
    local install_dir=/usr/share

    local _parameters=
    read_application_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi

    local KEYCLOAK_HOME=${install_dir}/keycloak

    # _PORT=${3:-"8088"}

    ## Install keycloak
    # https://blog.ineat-conseil.fr/2017/11/securisez-vos-apis-spring-avec-keycloak-1-installation-de-keycloak/
    # https://medium.com/@hasnat.saeed/setup-keycloak-server-on-ubuntu-18-04-ed8c7c79a2d9
    mkdir -p $KEYCLOAK_HOME;
    curl -fSL https://downloads.jboss.org/keycloak/${version}/keycloak-${version}.tar.gz -o keycloak-${version}.tar.gz;
    tar -xzf keycloak-${version}.tar.gz -C $KEYCLOAK_HOME --strip-components=1;


    useradd -s /bin/false -r -d $KEYCLOAK_HOME keycloak;
    chown -R keycloak:keycloak $KEYCLOAK_HOME;
    chmod g+wr $KEYCLOAK_HOME
    chmod o+x $KEYCLOAK_HOME/bin/

    if [[ -n "$USER_ADMIN" ]]; then sudo usermod -aG keycloak $USER_ADMIN; fi

    mkdir -p $KEYCLOAK_HOME/modules/org/postgresql/main
    curl -fSL https://jdbc.postgresql.org/download/postgresql-42.2.5.jar -o $KEYCLOAK_HOME/modules/org/postgresql/main/postgresql-42.2.5.jar
echo '<?xml version="1.0" ?>
<module xmlns="urn:jboss:module:1.3" name="org.postgresql">
    <resources>
        <resource-root path="postgresql-42.2.5.jar"/>
    </resources>
    <dependencies>
        <module name="javax.api"/>
        <module name="javax.transaction.api"/>
    </dependencies>
</module>' > $KEYCLOAK_HOME/modules/org/postgresql/main/module.xml

    # curl -fSL https://jdbc.postgresql.org/download/postgresql-42.2.5.jar -o $KEYCLOAK_HOME/postgresql-42.2.5.jar
    # $KEYCLOAK_HOME/bin/jboss-cli.sh -c "module add --name=org.postgresql  --dependencies=javax.api,javax.transaction.api --resources=postgresql-42.2.5.jar"


    curl -fSL https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.47.tar.gz -o /tmp/mysql-connector-java-5.1.47.tar.gz
    tar -xzf /tmp/mysql-connector-java-5.1.47.tar.gz mysql-connector-java-5.1.47/mysql-connector-java-5.1.47.jar --strip-components=1
    cp -f mysql-connector-java-5.1.47.jar $KEYCLOAK_HOME
    # $KEYCLOAK_HOME/bin/jboss-cli.sh -c "module add --name=org.mysql  --dependencies=javax.api,javax.transaction.api --resources=mysql-connector-java-5.1.47.jar"


    mkdir -p /etc/keycloak;
    cp -f $KEYCLOAK_HOME/docs/contrib/scripts/systemd/wildfly.conf /etc/keycloak/keycloak.conf;
    cp -f $KEYCLOAK_HOME/docs/contrib/scripts/systemd/launch.sh $KEYCLOAK_HOME/bin/
    sed -i -e "s|/opt/wildfly|$KEYCLOAK_HOME|" $KEYCLOAK_HOME/bin/launch.sh;
    sed -i -e "s|standalone.sh.*|standalone.sh -c \$2 -b \$3 -Djboss.socket.binding.port-offset=100 |" $KEYCLOAK_HOME/bin/launch.sh;
    chown -R keycloak:keycloak /etc/keycloak

#  $WILDFLY_MODE $WILDFLY_CONFIG $WILDFLY_BIND
# /usr/share/keycloak/bin/standalone.sh -c standalone.xml -b 0.0.0.0 -Djboss.socket.binding.port-offset=100

if [[ ! -f /etc/systemd/system/keycloak.service ]]; then
echo "
[Unit]
Description=The Keycloak Server
After=syslog.target network.target tomcat.target
Before=httpd.service

[Service]
Environment=LAUNCH_JBOSS_IN_BACKGROUND=1
EnvironmentFile=/etc/keycloak/keycloak.conf
User=keycloak
LimitNOFILE=102642
PIDFile=$KEYCLOAK_HOME/keycloak.pid
ExecStart=$KEYCLOAK_HOME/bin/launch.sh \$WILDFLY_MODE \$WILDFLY_CONFIG \$WILDFLY_BIND
StandardOutput=null

[Install]
WantedBy=multi-user.target
" > /etc/systemd/system/keycloak.service
fi

    $KEYCLOAK_HOME/bin/add-user-keycloak.sh -u admin -p admin -r master
}
#!/bin/bash

# https://www.thegeekstuff.com/2015/01/openldap-linux/
# https://www.itzgeek.com/how-tos/linux/centos-how-tos/step-step-openldap-server-configuration-centos-7-rhel-7.html
# https://community.cloudera.com/t5/Community-Articles/How-to-setup-OpenLDAP-2-4-on-CentOS-7/ta-p/249263
# # https://www.tecmint.com/install-openldap-server-for-centralized-authentication/
# https://linuxhostsupport.com/blog/how-to-install-ldap-on-centos-7/

# centos 7



ldap_install() {
    _major_centos_version=$(rpm -E %{rhel})
    if [[ "$_major_centos_version" == "7" ]];
    then 
        sudo yum -y install openldap compat-openldap openldap-clients openldap-servers openldap-servers-sql openldap-devel
    fi

    if [[ "$_major_centos_version" == "8" ]];
    then 
        # for centos 8 -> https://kifarunix.com/install-and-setup-openldap-on-centos-8/
        # for centos 8 -> https://repo.symas.com/sofl/rhel8/
        # yum config-manager --add-repo https://repo.symas.com/configs/SOFL/rhel8/sofl.repo
        # yum update
        sudo yum install -y symas-openldap-clients symas-openldap-servers
    fi
}

## detect if a script is being sourced or not
# if [[ $_ == $0 ]] 
# then
# 	ldap_install "$@"
# fi
#!/bin/bash

# Install mariadb https://www.tecmint.com/install-mariadb-in-centos-6/

function mariadb_install() 
{
    set -e
    local _version="${1:-"5.7"}"
	local MYSQL_RPM="mysql57-community-release-el7-9.noarch.rpm"
    
	if [[ $_version =~ ^8.*$ ]];
	then 
		MYSQL_RPM=mysql80-community-release-el7-1.noarch.rpm
	fi
     
	wget https://dev.mysql.com/get/$MYSQL_RPM
	rpm -ivh "${MYSQL_RPM}" && \
	yum -y install mysql-server &&
	systemctl enable mysqld
	
	# mysqld --initialize-insecure --user=mysql; 
}

# ## detect if a script is being sourced or not
# if [[ $_ == $0 ]] 
# then
# 	mariadb_install "$@"
# fi
#!/bin/bash

mongodb_install() {
    echo "[MongoDB]" > /etc/yum.repos.d/mongodb.repo; \
    echo "name=MongoDB Repository" >> /etc/yum.repos.d/mongodb.repo; \
    echo "baseurl=http://repo.mongodb.org/yum/redhat/7/mongodb-org/4.2/x86_64/" >> /etc/yum.repos.d/mongodb.repo; \
    echo "gpgcheck=1" >> /etc/yum.repos.d/mongodb.repo; \
    echo "enabled=1" >> /etc/yum.repos.d/mongodb.repo; \
    echo "gpgkey=https://www.mongodb.org/static/pgp/server-4.2.asc" >> /etc/yum.repos.d/mongodb.repo;

    yum install -y mongodb-org
    systemctl unmask mongodb
}
#!/bin/bash

# Install a httpd

function mysql_install() 
{
    set -e
	local _major_centos_version=$(rpm -E %{rhel})
    local _version="${1:-"5.7"}"
	local MYSQL_RPM="mysql57-community-release-el$_major_centos_version-9.noarch.rpm"
    
	
	if [[ ! $_major_centos_version =~ 6 ]];
	then
		if [[ $_version =~ ^8.*$ ]];
		then 
			MYSQL_RPM=mysql80-community-release-el$_major_centos_version-1.noarch.rpm
		fi
		wget https://dev.mysql.com/get/$MYSQL_RPM
		rpm -ivh "${MYSQL_RPM}"
	fi
     

	yum -y install mysql-server &&
	(if [[ $_major_centos_version =~ 6 ]]; then chkconfig --add mysqld ; else systemctl enable mysqld; fi)
	
	
	# mysqld --initialize-insecure --user=mysql; 
}


mysql_init(){
    local version=11
    local data=


    local _parameters=
    read_application_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi

	# mysqld --initialize-insecure --user=mysql;
	# get temporary password
	# grep 'temporary password' /var/log/mysqld.log
	# How to remove root password
	# mysqladmin -u root -p"temporary password" password ''

	service mysqld restart
	if [ -f /var/log/mysqld.log ] ; then
		tmp_pwd_line=$(grep 'temporary password' /var/log/mysqld.log)
		tmp_pwd=${tmp_pwd_line##*root@localhost\:}
		tmp_pwd=${tmp_pwd#"${tmp_pwd%%[![:space:]]*}"}
		if [ -n "$tmp_pwd" ] ; then
			echo "Trying to remove root@localhost password"
			mysqladmin -u root -p${tmp_pwd} password '' && \
			sed -i -e "s/temporary password/temporary_password/" /var/log/mysqld.log
		fi
	fi


	if [ -n "$DB_USER" ] ; then
		EXISTS_DB_USER="$(mysql -u root -sse "SELECT EXISTS(SELECT 1 FROM mysql.user WHERE user = '$DB_USER')")"
		if [ "$EXISTS_DB_USER" = 0 ]; then
			mysql -u root --execute="CREATE USER '$DB_USER'@'%' IDENTIFIED BY '$DB_PASSWORD'; GRANT ALL PRIVILEGES ON *.* TO '$DB_USER'@'%'; FLUSH PRIVILEGES; ";
		fi
	fi


}

#!/bin/bash


nexcloud_install() {
    _VERSION=${1:-"latest"}
    _DESTINATION=${2:-"/var/www"}
    # Download
    cd $_DESTINATION && \
    curl -fSL https://download.nextcloud.com/server/releases/$_VERSION.tar.bz2  -o nextcloud-$_VERSION.tar.bz2 && \
    tar -jxf nextcloud-$_VERSION.tar.bz2  # Extract files

    #  Create nextcloud data folder
    mkdir $_DESTINATION/nextcloud/data
    chown -R apache:apache $_DESTINATION/nextcloud/
}
#!/bin/bash


node_install() {
    rpm --import https://dl.yarnpkg.com/rpm/pubkey.gpg

    yum install -y mod_ssl nodejs npm yarn

    if [[ -n "$http_proxy" ]]; then 
        npm config set proxy $http_proxy -g; 
    fi

    npm install -g n && n stable
}

#!/bin/bash

# Install a php

# https://medium.com/@daniel.bui/multiple-php-version-with-apache-on-centos-7-17078c66692c



function php_install()
{
    set -e
    local version="${1}"

    sudo yum -y install php$version \
		php$version-devel \
		php$version-fpm \
		php$version-mysql \
		php$version-mssql \
		php$version-pgsql \
		php$version-odbc \
		php$version-gd \
		php$version-imap \
		php$version-interbase \
		php$version-intl \
		php$version-mbstring \
		php$version-mcrypt \
		php$version-ldap \
		php$version-xml \
		php$version-xmlrpc \
		php$version-soap \
		php$version-pear \
		php$version-process \
		php$version-opcache \
		php$version-pecl-geoip \
		php$version-pecl-memcache \
		php$version-pecl-memcached \
		php$version-pecl-apcu \
		php$version-pecl-apcu-devel \
		php$version-pecl-igbinary \
		php$version-pecl-mongodb \
		php$version-pecl-redis \
		php$version-pecl-xdebug \
		php$version-pecl-imagick \
		php$version-pecl-zip
	
	# Setting composer
    if [ ! -f /usr/local/bin/composer ]
    then 
	    curl -sS https://getcomposer.org/installer | php$version && mv composer.phar /usr/local/bin/composer
    fi

	if [ -f /etc/httpd/conf.d/php$version-php.conf ]
    then 
	    mv /etc/httpd/conf.d/php$version-php.conf /etc/httpd/conf.d/php$version-php.conf.bck
    fi

    local _BIN_="/bin"

    if [[ "$(rpm -E %{rhel})" == "6"  ]];
    then
        _BIN_="/usr/bin"
    fi

	if [ ! -f /var/www/cgi-bin/php$version.fcgi  ]
    then 
		echo "#!/bin/bash \n exec $_BIN_/php74-cgi"> /var/www/cgi-bin/php$version.fcgi
    fi
	
	sudo chmod 755 /var/www/cgi-bin/*.fcgi
}


# ## detect if a script is being sourced or not
# if [[ $_ == $0 ]] 
# then
# 	install_httpd "$@"
# fi
#!/bin/bash

function proxy_usage()
{
    echo "Usage:"
    echo "    ${cmd//_/:} [command] "
    echo ""
    echo "Commands:"
    echo "  config                 Sets proxy configuration"
    echo "Arguments:"
    echo "  --                 Username"
    echo ""
    echo "Options:"
    echo "  -h, --help              Display this help message"
    echo "      --uid               User ID"
    echo "      --gid               User's group ID"
    echo "      --home              User's home "
    echo "      --password          User's password"
    echo "      --group            Sets groups to user"
    echo "  -f, --update            Update user if already exist"
    echo ""
    echo "Help:"
    echo "  The ${cmd//_/:} Add or update user"
    echo ""
    echo "  $0 ${cmd//_/:} centos"
    echo "  $0 ${cmd//_/:} centos --uid=2000 --gid=2000 --password=pwd123 --group=wheel"
    echo ""
}

# Reads arguments options
function parse_proxy_arguments()
{
  # if [ $# -ne 0 ]; then
    local TEMP=`getopt -o p:: --long http::,https::,no-proxy:: -n "$0" -- "$@"`
    
	eval set -- "$TEMP"
    # extract options and their arguments into variables.
    while true ; do
        case "$1" in
            --http) http="-u ${2}" ; shift 2 ;;
            --https) https="-g ${2}" ; shift 2 ;;
            --no-proxy) noproxy+="${2} "; shift 2 ;;
            --) shift ; break ;;
            *) echo "Internal error! $1" ; exit 1 ;;
        esac
    done

    shift $(expr $OPTIND - 1 )
    _parameters=$@
}


# 
function proxy_set_config() 
{
    set -e
    local help=0
    local http=
    local https=
    local noproxy=

    local _parameters=
    parse_proxy_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi

    local proxy=${http:-"$https"}
    proxy=${proxy:-"$1"}
    https=${https:-"$http"}

    if [ -z "$proxy" ]; then
        exit 0
    fi

    export http_proxy=$http
    export https_proxy=$https
    export no_proxy=$noproxy

    if [[ -f /etc/yum.conf ]]; then 
        echo "proxy=$proxy" >> /etc/yum.conf;
    fi
}

function proxy_unset() 
{
    set -e
    unset http_proxy
    unset https_proxy
    unset no_proxy

    if [[ -f /etc/yum.conf ]]; then 
        sed -i '/^proxy .*/d' /etc/yum.conf
    fi
}
#!/bin/bash

# Reads arguments options
function parse_postgresql_arguments()
{
  # if [ $# -ne 0 ]; then
    local TEMP=`getopt -o p:: --long data::,version::,port::,config-file:: -n "$0" -- "$@"`
    
	eval set -- "$TEMP"
    # extract options and their arguments into variables.
    while true ; do
        case "$1" in
            --data) data=${2%"/"} ; shift 2 ;;
            --file-config) config_file=${2:-"$config_file"}; shift 2 ;;
            --version) _version=${2:-"$_version"}; shift 2 ;;
            --port) port=${2:-"$port"}; shift 2 ;;
            --users-config) users_config=${2:-"$users_config"}; shift 2 ;;
            # --db-name) DB_NAME=${2:-"$DB_NAME"}; shift 2 ;;
            # --db-user) DB_USER=${2:-"$DB_USER"}; shift 2 ;;
            # --db-password) DB_PASSWORD=${2:-"$DB_PASSWORD"}; shift 2 ;;
            # --db-host) DB_HOST=${2:-"$DB_HOST"}; shift 2 ;;
            # --port) port=${2:-"$port"}; shift 2 ;;
            --) shift ; break ;;
            *) echo "Internal error! $1" ; exit 1 ;;
        esac
    done

    shift $(expr $OPTIND - 1 )
    _parameters=$@
    
  # fi
}

function psql_install() 
{
    set -e
    local _version="${1:-"11"}"
    local _parameters=
    parse_postgresql_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi

    # Install postgresql 11  https://www.postgresql.org/download/linux/redhat/
    sudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm \
    yum install -y postgresql$_version  postgresql$_version-libs postgresql$_version-server postgresql$_version-devel postgis25_$_version \
    systemctl enable postgresql-$_version 

}

psql_init(){
    local version=11
    local data=


    local _parameters=
    read_application_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi


    local data=${data:-"/var/lib/pgsql/${version}/data"}

    if [[ ( ! -d $data ) || ( ! "$(ls -A $data)" ) ]]; then
        echo "Init postgresql $version"
        /usr/pgsql-${version}/bin/postgresql-${version}-setup initdb
        # systemctl restart postgresql-${version} 
        # systemctl restart postgresql-${version} 

        if ! grep '0.0.0.0/0' $data/pg_hba.conf ; then
            echo 'host      all     all     0.0.0.0/0 md5' >> $data/pg_hba.conf
        fi
    fi
}

#!/bin/bash

# Install solr


# Reads arguments options
function parse_python_arguments()
{
  # if [ $# -ne 0 ]; then
    local TEMP=`getopt -o p:: --long data::,version::,port::,config-file:: -n "$0" -- "$@"`
    
	eval set -- "$TEMP"
    # extract options and their arguments into variables.
    while true ; do
        case "$1" in
            --install-dir) INSTALL_DIR=${2:-"$INSTALL_DIR"} ; shift 2 ;;
            --data) data=${2%"/"} ; shift 2 ;;
            --file-config) config_file=${2:-"$config_file"}; shift 2 ;;
            --version) version=${2:-"$version"}; shift 2 ;;
            --port) port=${2:-"$port"}; shift 2 ;;
            --users-config) users_config=${2:-"$users_config"}; shift 2 ;;
            # --db-name) DB_NAME=${2:-"$DB_NAME"}; shift 2 ;;
            # --db-user) DB_USER=${2:-"$DB_USER"}; shift 2 ;;
            # --db-password) DB_PASSWORD=${2:-"$DB_PASSWORD"}; shift 2 ;;
            # --db-host) DB_HOST=${2:-"$DB_HOST"}; shift 2 ;;
            # --port) port=${2:-"$port"}; shift 2 ;;
            --) shift ; break ;;
            *) echo "Internal error! $1" ; exit 1 ;;
        esac
    done

    shift $(expr $OPTIND - 1 )
    _parameters=$@
    
  # fi
}

function python_install_requirements() 
{
    set -e
    requirements=${1:-"requirements.txt"}
    local _USE_PROXY
    if [[ -n "$http_proxy" ]]; then
        _USE_PROXY="--proxy $http_proxy";
    fi

    if [ -f $requirements ]; then
        pip3 install ${PIP_USE_PROXY} $requirements
    fi
}


function python_install() 
{
    set -e
    local _USE_PROXY
    if [[ -n "$http_proxy" ]]; then
        _USE_PROXY="--proxy $http_proxy";
    fi

    pip3 install ${PIP_USE_PROXY} $@
}


# if [ ! $# -eq 0 ]; 
# then
#   install_solr $@
# fi
#!/bin/bash

redis_install() {
    if [ ! -f /etc/yum.repos.d/remi.repo ]; then
        sudo yum install -y http://rpms.remirepo.net/enterprise/remi-release-7.rpm
    fi
    sudo yum-config-manager --enable remi 
    sudo yum -y install redis
}

#!/bin/bash

# Install solr


# Reads arguments options
function parse_solr_arguments()
{
  # if [ $# -ne 0 ]; then
    local TEMP=`getopt -o p:: --long data::,version::,port::,config-file:: -n "$0" -- "$@"`
    
	eval set -- "$TEMP"
    # extract options and their arguments into variables.
    while true ; do
        case "$1" in
            --install-dir) INSTALL_DIR=${2:-"$INSTALL_DIR"} ; shift 2 ;;
            --data) data=${2%"/"} ; shift 2 ;;
            --file-config) config_file=${2:-"$config_file"}; shift 2 ;;
            --version) version=${2:-"$version"}; shift 2 ;;
            --port) port=${2:-"$port"}; shift 2 ;;
            --users-config) users_config=${2:-"$users_config"}; shift 2 ;;
            # --db-name) DB_NAME=${2:-"$DB_NAME"}; shift 2 ;;
            # --db-user) DB_USER=${2:-"$DB_USER"}; shift 2 ;;
            # --db-password) DB_PASSWORD=${2:-"$DB_PASSWORD"}; shift 2 ;;
            # --db-host) DB_HOST=${2:-"$DB_HOST"}; shift 2 ;;
            # --port) port=${2:-"$port"}; shift 2 ;;
            --) shift ; break ;;
            *) echo "Internal error! $1" ; exit 1 ;;
        esac
    done

    shift $(expr $OPTIND - 1 )
    _parameters=$@
    
  # fi
}

function solr_install() 
{
    set -e
      cd /tmp
    # local name="solr"
    local version=8.2.0
    local data=
    # local catalina_home=/usr/share/tomcat
    # local DB_PASSWORD=
    # local DB_HOST=localhost
    local port=8983
    local solr_config=
    local file_config=
    local INSTALL_DIR=/usr/share
    # echo $@
    local _parameters=
    parse_solr_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi

    # data=${data:-"$1"}
    data=${data%"/"} 
    INSTALL_DIR=${INSTALL_DIR%"/"}

    case "$version" in
        "8") version=8.2.0 ;;
        "7") version=7.7.2 ;;
        *)
        ;;
    esac

    # Install Solr
    # ARG version=7.4.0
    # ARG SOLR_PORT=8983
    # ENV SOLR_DIR=${APP_DIR}/solr

    rm -rf solr-"$version".tgz install_solr_service.sh

    # echo 2
    curl -fSL https://archive.apache.org/dist/lucene/solr/$version/solr-$version.tgz -o solr-$version.tgz

    #
    mkdir -p ${data} $INSTALL_DIR \
    && tar -xzf solr-"$version".tgz solr-"$version"/bin/install_solr_service.sh --strip-components=2

    if [ -n "$data" ]; then 
        ./install_solr_service.sh solr-"$version".tgz -i "${INSTALL_DIR}" -d "$data" -p "${port}" 
    else
        ./install_solr_service.sh solr-"$version".tgz -i "${INSTALL_DIR}" -p "${port}" 
    fi
      
    # echo " ./install_solr_service.sh solr-$version.tgz -i ${INSTALL_DIR} -d $data -p ${port} "
    
    cd $INSTALL_DIR/solr/server/solr-webapp/webapp/WEB-INF/lib && \
    wget https://github.com/locationtech/jts/releases/download/jts-1.16.1/jts-core-1.16.1.jar
    # cd $INSTALL_DIR/solr/server/solr-webapp/webapp/WEB-INF/lib && \
    # wget http://central.maven.org/maven2/org/locationtech/jts/jts-core/1.15.0/jts-core-1.15.0.jar

    # && chown :"${GROUP_ADMIN}" -R /etc/default/ && chmod g+w -R /etc/default \
    # && usermod solr -g "${GROUP_ADMIN}" \
    # && systemctl enable solr 
    rm -rf solr-"$version".tgz install_solr_service.sh && chown solr:solr -R "${INSTALL_DIR}/solr" ${data}


    # if [[ -n "$GROUP_ADMIN" ]]; then
    #     sudo usermod -g $GROUP_ADMIN solr;
    # fi
}


# if [ ! $# -eq 0 ]; 
# then
#   install_solr $@
# fi
#!/bin/bash

# Install tomcat


# Reads arguments options
function parse_tomcat_arguments()
{
    # if [ $# -ne 0 ]; then
    local TEMP=`getopt -o p:: --long tomcat-config::,users-config::,config-file:: -n "$0" -- "$@"`
      
    eval set -- "$TEMP"
    # extract options and their arguments into variables.
    while true ; do
        case "$1" in
            --data) data=${2%"/"} ; shift 2 ;;
            --file-config) config_file=${2:-"$config_file"}; shift 2 ;;
            # --tomcat-config) tomcat_config=${2:-"$tomcat_config"}; shift 2 ;;
            --users-config) users_config=${2:-"$users_config"}; shift 2 ;;
            # --db-name) DB_NAME=${2:-"$DB_NAME"}; shift 2 ;;
            # --db-user) DB_USER=${2:-"$DB_USER"}; shift 2 ;;
            # --db-password) DB_PASSWORD=${2:-"$DB_PASSWORD"}; shift 2 ;;
            # --db-host) DB_HOST=${2:-"$DB_HOST"}; shift 2 ;;
            # --db-port) DB_PORT=${2:-"$DB_PORT"}; shift 2 ;;
            --) shift ; break ;;
            *) echo "Internal error! $1" ; exit 1 ;;
        esac
    done

    shift $(expr $OPTIND - 1 )
    _parameters=$@
    
  # fi
}

function tomcat_install() 
{
	set -e
	local users_config=
	local file_config=
    # echo $@
    local _parameters=
    parse_tomcat_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi
    # data=${data:-"$1"}
    # data=${data:-"."}
    # data=${data%"/"} 

	if [[ -n "$file_config" && ! -f $file_config ]]
	then
    echo "File not found $file_config" 
    exit 1
	fi

	if [[ -n "$users_config" && ! -f $users_config ]]
	then
    echo "File not found $users_config" 
    exit 1
	fi

    sudo yum install -y tomcat tomcat-webapps tomcat-admin-webapps
  
	if [[ -n "$file_config" ]]
	then
        sudo rm -f /etc/tomcat/tomcat.conf.old
        sudo mv /etc/tomcat/tomcat.conf /etc/tomcat/tomcat.conf.old
        sudo mv  $file_config /etc/tomcat/tomcat.conf
	fi
  
	if [[ -n "$users_config" ]]
	then
        sudo rm -f /etc/tomcat/tomcat-users.xml.old
        sudo mv /etc/tomcat/tomcat-users.xml /etc/tomcat/tomcat-users.xml.old
        sudo mv  $users_config /etc/tomcat/tomcat-users.xml
	fi
    
    echo "CATALINA_HOME=/usr/share/tomcat" >> /etc/profile.d/environnments.sh
}


function tomcat_make_install() 
{
    #https://nvbach.blogspot.com/2019/04/installing-blazegraph-on-linux-debian.html
    groupadd tomcat
    mkdir /opt/tomcat
    useradd -g tomcat -d /opt/tomcat -s /bin/nologin tomcat

    cd /tmp
    wget [link to the Tomcat 7.0.90 tar.gz file]
    tar -zxvf apache-tomcat-7.0.90.tar.gz
    mv apache-tomcat-7.0.90/* /opt/tomcat
    chown -R tomcat:tomcat /opt/tomcat/
    
    echo "CATALINA_HOME=/opt/tomcat" >> /etc/profile.d/environnments.sh
}

# if [ ! $# -eq 0 ]; 
# then
#   install_tomcat $@
# fi
#!/bin/bash

# Install a wordpress


# Reads arguments options
function parse_wp_arguments()
{
  # if [ $# -ne 0 ]; then
    local TEMP=`getopt -o p:: --long data::,name::,version::,db-name::,db-user::,db-password::,db-host::,config-file:: -n "$0" -- "$@"`
    
	eval set -- "$TEMP"
    # extract options and their arguments into variables.
    while true ; do
        case "$1" in
            --data) data=${2%"/"} ; shift 2 ;;
            --version) version=${2:-"$version"}; shift 2 ;;
            --name) name=${2:-"$name"}; shift 2 ;;
            --db-name) DB_NAME=${2:-"$DB_NAME"}; shift 2 ;;
            --db-user) DB_USER=${2:-"$DB_USER"}; shift 2 ;;
            --db-password) DB_PASSWORD=${2:-"$DB_PASSWORD"}; shift 2 ;;
            --db-host) DB_HOST=${2:-"$DB_HOST"}; shift 2 ;;
            --db-port) DB_PORT=${2:-"$DB_PORT"}; shift 2 ;;
            --config-file) config_file=${2:-"$config_file"}; shift 2 ;;
            --) shift ; break ;;
            *) echo "Internal error! $1" ; exit 1 ;;
        esac
    done

    shift $(expr $OPTIND - 1 )
    _parameters=$@
    
  # fi
}

function wordpress_install() 
{
	set -e
  local name="wordpress"
	local version=
	local DB_NAME=
	local DB_USER=
	local DB_PASSWORD=
	local DB_HOST=localhost
	local DB_PORT=3306
	local data=
	local config_file=
    # echo $@
    local _parameters=
    parse_wp_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi
    data=${data:-"$1"}
    data=${data:-"."}
    data=${data%"/"} 

	local DIR_NAME=$data/$name
	
	wget http://wordpress.org/latest.zip
	rm -rf $DIR_NAME
	unzip -q latest.zip -d $data
	rm -f latest.zip

	if [ ! "$name" == "wordpress" ]
	then
		# echo mv $data/wordpress $data/$name
		mv -f $data/wordpress $data/$name
	fi

	# mv $_INSTALL_DIR/wordpress $_INSTALL_DIR/$_SITE_NAME
	# chown -R :$ $_INSTALL_DIR/$_SITE_NAME

	chmod -R 775 $DIR_NAME
	mkdir -p $DIR_NAME/wp-content/uploads
	# chown -R :apache $DIR_NAME/wp-content/uploads
	cp -f $DIR_NAME/wp-config-sample.php $DIR_NAME/wp-config.php

	sed -i "s/database_name_here/$DB_NAME/" $DIR_NAME/wp-config.php
	sed -i "s/username_here/$DB_USER/" $DIR_NAME/wp-config.php
	sed -i "s/password_here/$DB_PASSWORD/" $DIR_NAME/wp-config.php
	sed -i "s/localhost/$DB_HOST:$DB_PORT/" $DIR_NAME/wp-config.php
}


# if [ ! $# -eq 0 ]; 
# then
#   install_wordpress $@
# fi
#!/bin/bash


wso2_install() {
    _VERSION=${1:-"5.7.0"}
    _INSTALL_DIR=${2:-"/usr/share"}

    curl -fSL https://bintray.com/wso2/rpm/rpm -o /etc/yum.repos.d/bintray-wso2-rpm.repo
    yum install -y wso2is-$_VERSION

    _WSO2_DIR=/usr/lib64/wso2/wso2is/$_VERSION
    _WSO2_HOME=/usr/lib64/wso2

    if [[ -n "${_INSTALL_DIR}" && ! -d ${_INSTALL_DIR}/wso2 && ! -L ${_INSTALL_DIR}/wso2  ]]; then
        ln -s $_WSO2_DIR ${_INSTALL_DIR}/wso2
    fi

    if ! getent passwd wso2 > /dev/null 2>&1; then
        useradd -r -d ${_WSO2_HOME}/ wso2
    fi

    chown -R wso2:wso2 ${_WSO2_HOME}

if [[ ! -f /etc/systemd/system/wso2.service ]]; then
echo "
[Unit]
Description=WSO2 server identity provider
After=syslog.target network.target

[Service]
Type=forking
Environment=JAVA_HOME=/usr/lib/jvm/jre
Environment=CARBON_HOME=${_WSO2_DIR}
PermissionsStartOnly=true
PIDFile=${_WSO2_DIR}/wso2carbon.pid

ExecStart=${_WSO2_DIR}/bin/wso2server.sh start
ExecStop=${_WSO2_DIR}/bin/wso2server.sh stop

TimeoutStartSec=30s
Restart=on-failure
RestartSec=10s
RemainAfterExit=yes

User=wso2
[Install]
WantedBy=multi-user.target
" > /etc/systemd/system/wso2.service
fi
}

#!/bin/bash
#


function add_groups_usage()
{
    echo "Usage:"
    echo "    ${cmd//_/:} [options] <console>"
    echo ""
    echo "Arguments:"
    echo "  console                 The console: default=bin/console"
    echo ""
    echo "Options:"
    echo "  -h, --help              Display this help message"
    echo "      --users             The path where saved orm mapping information"
    echo "      --groups            The path where saved orm mapping information"
    echo ""
    echo "Help:"
    echo "  The ${cmd//_/:} Ajouter des usagers dans des groupes"
    # echo ""
    # echo "  You have to limit generation of schema:"
    # echo ""
    # echo "  * To a single entity"
    # echo ""
    # echo "  $0 ${cmd//_/:} --name=User"
    # echo ""
    # echo "  * To a set of entities"
    # echo ""
    # echo "  $0 ${cmd//_/:} --name=User --name=Role"
    echo ""
}

# bin/cpm build:dal --orm-path=$APP_ORM_DIR --path=.
function add_groups() 
{
    set -e
    local _HELP=0
    local _USER=
    local _USERS=
    local _GROUP=
    local _GROUPS=
    local _PATH=
    local _ENV=

    local _parameters=
    users_arguments_parser $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi

    if [[ -z "$_GROUPS" ]]; 
    then
        # echo "$_ORM_PATH:$_APP:$_entity_namespace!"
        echo "Commande invalide!"
        echo "    Required --group:              Group's name"
        echo "    Required --groups:             Groups's name"
        add_groups_usage
        exit 1
    fi

    for group in $_GROUPS
    do  
        if ! grep -q "^${group}:" /etc/group
        then
            groupadd $group
            echo "Group '$group' does not exist: group will create!"
        fi
        
        for user in $_USERS
        do  
            # checks if user exit
            if grep -q "^${user}:" /etc/passwd
            then
                usermod -aG $group ${user}
            else
                echo "User '$user' does not exist"
            fi
        done
    done

}
    
    
#!/bin/bash
#


function add_users_usage()
{
    echo "Usage:"
    echo "    ${cmd//_/:} [options] <console>"
    echo ""
    echo "Arguments:"
    echo "  console                 The console: default=bin/console"
    echo ""
    echo "Options:"
    echo "  -h, --help              Display this help message"
    echo "      --users             The path where saved orm mapping information"
    echo "      --groups            The path where saved orm mapping information"
    echo ""
    echo "Help:"
    echo "  The ${cmd//_/:} Ajouter des usagers dans des groupes"
    # echo ""
    # echo "  You have to limit generation of schema:"
    # echo ""
    # echo "  * To a single entity"
    # echo ""
    # echo "  $0 ${cmd//_/:} --name=User"
    # echo ""
    # echo "  * To a set of entities"
    # echo ""
    # echo "  $0 ${cmd//_/:} --name=User --name=Role"
    echo ""
}

# bin/cpm build:dal --orm-path=$APP_ORM_DIR --path=.
function add_users() 
{
    set -e
    local _HELP=0
    local _USER=
    local _USERS=
    local _GROUP=
    local _GROUPS=
    local _PATH=
    local _ENV=

    local _parameters=
    users_arguments_parser $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi

    if [[ -z "$_USERS" ]]; 
    then
        # echo "$_ORM_PATH:$_APP:$_entity_namespace!"
        echo "Commande invalide!"
        echo "    Required --user:              Group's name"
        echo "    Required --users:             Groups's name"
        add_users_usage
        exit 1
    fi

    for user in $_USERS
    do  
        if ! grep -q "^${user}:" /etc/passwd
        then
            useradd $group
            echo "User '$user' does not exist,  user created!"
        fi
        
        for group in $_GROUPS
        do  
            # checks if user exit
            if ! grep -q "^${group}:" /etc/group
            then
                groupadd $group
                echo "Group '$group' does not exist: group created!"                 
            fi
            usermod -aG $group ${user}
        done
    done

}
    
    #!/bin/bash

# Reads arguments options
function users_arguments_parser()
{
  # if [ $# -ne 0 ]; then
    TEMP=`getopt -o e::p::u::g:: --long env::,path::,user::,users::,group::groups:: -n "$0" -- "$@"`
    eval set -- "$TEMP"
    # extract options and their arguments into variables.
    while true ; do
        case "$1" in
            -h|--help) _HELP=1 ; shift 1 ;;
            -u|--user) _USER=${2:-"$_USER"}; _USERS+="${_USER} ";  shift 2 ;;
            --users) _USERS+="${2} ";  shift 2 ;;
            -g|--group) _GROUP=${2:-"$_GROUP"}; _GROUPS+="${_GROUP} ";  shift 2 ;;
            --groups) _GROUPS+="${2} ";  shift 2 ;;
            -p|--path) _PATH=${2:-"$_PATH"} ;  shift 2 ;;
            --) shift ; break ;;
            *) echo "Internal error! $1" ; exit 1 ;;
        esac
    done

    shift $(expr $OPTIND - 1 )
    _parameters=$@
    
  # fi
}
#!/bin/bash

function user_usage()
{
    echo "Usage:"
    echo "    ${cmd//_/:} [options] <username>"
    echo ""
    echo "Arguments:"
    echo "  username                 Username"
    echo ""
    echo "Options:"
    echo "  -h, --help              Display this help message"
    echo "      --uid               User ID"
    echo "      --gid               User's group ID"
    echo "      --home              User's home "
    echo "      --password          User's password"
    echo "      --group            Sets groups to user"
    echo "  -f, --update            Update user if already exist"
    echo ""
    echo "Help:"
    echo "  The ${cmd//_/:} Add or update user"
    echo ""
    echo "  $0 ${cmd//_/:} centos"
    echo "  $0 ${cmd//_/:} centos --uid=2000 --gid=2000 --password=pwd123 --group=wheel"
    echo ""
}

# Reads arguments options
function parse_user_arguments()
{
  # if [ $# -ne 0 ]; then
    local TEMP=`getopt -o p:: --long help::,uid::,gid::,home::,group::,password -n "$0" -- "$@"`
    
	eval set -- "$TEMP"
    # extract options and their arguments into variables.
    while true ; do
        case "$1" in
            --uid) uid="-u ${2}" ; shift 2 ;;
            --gid) gid="-g ${2}" ; shift 2 ;;
            --home) home="-d ${2}" ; shift 2 ;;
            --password) password="${2}" ; shift 2 ;;
            --group) groups+="${2} "; shift 2 ;;
            --) shift ; break ;;
            *) echo "Internal error! $1" ; exit 1 ;;
        esac
    done

    shift $(expr $OPTIND - 1 )
    _parameters=$@
}

# 
function user_add() 
{
    set -e
    local help=0
    local home=
    local uid=
    local gid=
    local password=
    local groups=

    local _parameters=
    parse_user_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi

    username=$1

    if [[ -z "$username" ]]; 
    then
        echo "Commande invalide!"
        echo "    Required username"
        user_usage
        exit 1
    fi

    
    if [ ! $(getent group ${username}) ]; then 
        groupadd $gid ${username};
    # else
    #     groupmod -g $USER_UID ${username};
    fi


    if ! getent passwd ${username} > /dev/null 2>&1; then
        useradd $uid -g ${username} $home ${username};
    else
        usermod $uid -g ${username} ${username};
    fi
    
    for group in $groups
    do  
        # checks if user exit
        if ! $(getent group ${group})
        then
            groupadd $group
            # echo "Group '$group' does not exist: group created!"                 
        fi
        usermod -aG $group ${username}
    done

    if [ -n "$password" ]; then
        echo "${password}" | passwd $username --stdin 
    fi
#     for user in $_USERS
#     do  
#     done

}

# 
function user_update() 
{
    set -e
    local help=0
    local home=
    local uid=
    local gid=
    local password=
    local groups=

    local _parameters=
    parse_user_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi

    username=$1

    if [[ -z "$username" ]]; 
    then
        echo "Commande invalide!"
        echo "    Required username"
        user_usage
        exit 1
    fi
    
    if getent passwd ${username} > /dev/null 2>&1; then
        echo "Commande invalide!"
        echo "    user '$username' not found"
        exit 1
    fi

    if [ -n "$uid" ] ; then
        usermod $uid ${username};
    fi
    if [ -n "$gid" ] ; then
        usermod $gid ${username};
    fi
    
    for group in $groups
    do  
        # checks if user exit
        if ! $(getent group ${group})
        then
            groupadd $group               
        fi
        usermod -aG $group ${username}
    done

    if [ -n "$password" ]; then
        echo "${password}" | passwd $username --stdin 
    fi
}
    
    
# # Configuration des comptes administrateurs

# # if [ -n "${ROOT_PASSWORD}" ];
# # then
# #     echo "${ROOT_PASSWORD}" | passwd "root" --stdin ; 
# # fi ;

# # # Sets user primary group
# # if [ ! $(getent group ${GROUP_ADMIN}) ]; 
# # then 
# #     groupadd ${GROUP_ADMIN}; 
# # fi 

# # usermod  -aG ${GROUP_ADMIN} root

# # if [ -n "$GROUP_ADMIN_UID" ]; 
# # then 
# #     groupmod -g $GROUP_ADMIN_UID ${GROUP_ADMIN}; 
# # fi


# _USER=${1}
# _USER_UID=${2}

# #
# # Create user account if not exist


# # ssh
# if ! getent passwd ${_USER} > /dev/null 2>&1; 
# then
        
#     if [ "$_USER" == "${GROUP_ADMIN}" ]; 
#     then
#         useradd -g ${_USER} ${_USER};
#     else
#         useradd ${_USER};
#     fi

    
# fi

# usermod $_USER -aG ${GROUP_ADMIN}

# if [ -n "$_USER_UID" ];
# then
#     usermod -u $_USER_UID ${_USER};
# fi
		
# # Sets user's password
# # if [ -n "${USER_PASSWORD}" ];
# # then 
# #     echo "${USER_PASSWORD}" | passwd "${_USER}" --stdin ;
# # fi;


# # ssh
# if getent passwd ${_USER} > /dev/null 2>&1; 
# then
#     if [[ -d $CONFIG_DIR/.${_USER}/.ssh ]]
#     then
#         mv $CONFIG_DIR/.${_USER}/.ssh /home/${_USER}/.ssh
#         chmod 600 /home/${_USER}/.ssh/*
#         chmod 700 /home/${_USER}/.ssh
#         if [ -f /home/${_USER}/.ssh/config ]; then chmod 644 /home/${_USER}/.ssh/config; fi
#     fi
    
#     if [ -f $CONFIG_DIR/.${_USER}/.gitconfig ]; then 
#         mv $CONFIG_DIR/.${_USER}/.gitconfig /home/${_USER}/;
#     fi

#     if [[ -d $CONFIG_DIR/.${_USER} ]]
#     then
#         rm -rf $CONFIG_DIR/.${_USER}
#     fi&_2(2Sotl/z!
# fi

# chown ${_USER}:${_USER} -R /home/${_USER}/#!/bin/bash
#
# Scripts cpm: Csimeu Package Manager
#
#   Emploi:     
#
##########   INSTANCE DE PRODUCTION  ##########
#


# Stop on first error [duplicate]

_home() {
    echo ${0/cpm/..}
}

_self_update() {
    cd `_home` && git pull origin master
}

_run_cpm() {
    set -e
    if [ $# -eq 0 ]; then
        # Commande invalide
        echo "Commande invalide!"
        exit 1
    fi

    cmd=$1

    case "$cmd" in
        "cc:dev")
            shift
            symfony_cc --env=dev $@
            exit 0;
            ;;
        "cc" | "symfony:cc")
            shift
            symfony_cc $@
            exit 0;
            ;;
        "self-update")
            shift
            _self_update $@
            exit 0;
            ;;
        *)
            cmd="${cmd//:/_}" 
            shift
            $cmd $@
        ;;
    esac

}

## detect if a script is being sourced or not
if [[ $(basename $0) == 'cpm' ]]
then
	_run_cpm "$@"
fi

