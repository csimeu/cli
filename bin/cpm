#!/bin/bash
# sed -i -e 's/\r$//' scriptname.sh

port_offset=0

AUTHOR=${AUTHOR}
WWW=${WWW:-"/var/www"}
WEB_HOME=${WEB_HOME:-"/var/www/html"}
GITHUB_DOMAIN=${GITHUB_DOMAIN:-'https://github.com'}

INSTALL_DIR=${INSTALL_DIR:-"/usr/share"}

POSTGRESQL_RELEASES="11 12 13 14"
POSTGIS_RELEASES="2.4 2.5 3"
POSTGRESQL_DEFAULT_VERSION=${POSTGRESQL_DEFAULT_VERSION:-"13"}
POSTGIS_DEFAULT_VERSION=${POSTGIS_DEFAULT_VERSION:-"3.3"}


TOMCAT_RELEASES="7 8 9"
TOMCAT_DEFAULT_VERSION=${TOMCAT_DEFAULT_VERSION:-"8"}

FCREPO_RELEASES="5.1.1 4.7.5"
FCREPO_DEFAULT_VERSION=${FCREPO_DEFAULT_VERSION:-"4.7.5"}

FUSEKI_RELEASES="4.1.0 3.14.0"
FUSEKI_DEFAULT_VERSION=${FUSEKI_DEFAULT_VERSION:-"4.1.0"}

BLAZEGRAPH_RELEASES="2.1.5"
BLAZEGRAPH_DEFAULT_VERSION=${BLAZEGRAPH_DEFAULT_VERSION:-"2.1.5"}

KEYCLOAK_RELEASES="14.0.0 13.0.0 12.0.0 11.0.0 9.0.1 8.0.2"
KEYCLOAK_DEFAULT_VERSION=${KEYCLOAK_DEFAULT_VERSION:-"8.0.2"}


MYSQL_RELEASES="5 8"
MYSQL_DEFAULT_VERSION=${MYSQL_DEFAULT_VERSION:-"8"}

SORL_RELEASES="7 8"
SORL_DEFAULT_VERSION=${SORL_DEFAULT_VERSION:-"8"}

PHP_DEFAULT_VERSION=${PHP_DEFAULT_VERSION:-7.3}

#!/bin/bash

# check to see if this file is being run or sourced from another script
is_sourced () {
    [[ "${FUNCNAME[1]}" == "source" ]]  && return 0
    return 1
}

# Checks if program was installed
has_command() {
    if [ -x "$(command -v ${1:-null})" ]; then true; else false; fi
}

# Checks if given string is an valid url
function is_url()
{
    # -- supported protocols (HTTP, HTTPS, FTP, FTPS, SCP, SFTP, TFTP, DICT, TELNET, LDAP or FILE) --
    regex='([a-z]{3,6})://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]'
    string=$1
    if [[ $string =~ $regex ]]
    then 
        true
    else
        false
    fi
}

# Transform snake words to camel
function snake_to_camel()
{
    echo $(echo $1 | sed -r 's/(^|_)(\w)/\U\2/g' )
}

# Transform camel words to snake
function camel_to_snake() 
{
    echo $(echo $1 | sed 's/\(.\)\([A-Z]\)/\1_\2/g' | tr '[:upper:]' '[:lower:]')
}

function is_alphanum() 
{    
    regex="^[a-zA-Z0-9_]+$"

    if [[ $1 =~ $regex ]]
    then 
        true
    else
        false
    fi
}


# get plateform
function plateform() 
{
    local value=`plateform_name`
    case $value in
        centos|rhel|fedora)
            value="redhat";
        ;;
        # *)
        #     value="debian"
        # ;;
    esac

    echo $value
}

# get plateform name
function plateform_name() 
{
    local value=$(awk -F= '/^ID=/{print $2}' /etc/os-release)
    echo ${value//\"/}
}

# get plateform version
function plateform_version() 
{
    local value=$(awk -F= '/^VERSION_ID=/{print $2}' /etc/os-release)
    echo ${value//\"/}
}


# get plateform version
function os_type() 
{
    local value=$(awk -F= '/^ID_LIKE=/{print $2}' /etc/os-release)
    value=${value//\"/}
    regex="^(debian|ubuntu)$"
    if [[ $value =~ $regex ]]
    then 
        true
    else
        false
    fi
}
function is_alpine() 
{
    local value=$(plateform_name)
    regex="^(alpine)$"
    if [[ $value =~ $regex ]]
    then 
        true
    else
        false
    fi
}
function is_debian() 
{
    local value=$(awk -F= '/^ID_LIKE=/{print $2}' /etc/os-release)
    value=${value//\"/}
    regex="^(debian|ubuntu)$"
    if [[ $value =~ $regex ]]
    then 
        true
    else
        false
    fi
}

function is_redhat()
{    
    local value=$(awk -F= '/^ID_LIKE=/{print $2}' /etc/os-release)
    value=${value//\"/}
    regex="^(rhel|centos|fedora)$"

    # echo $value
    if [[ $value =~ $regex ]]
    then 
        true
    else
        false
    fi
}

function install() 
{
    # echo "sudo yum install $@"
    case `plateform` in 
        debian)
            execute apt-get install $@
        ;;
            
        redhat)
            execute yum install $@
        ;;
            
        alpine)
            execute apk add $@
        ;;
    esac
}

function remove() 
{
    # echo "sudo yum remove $@"
    case `plateform` in 
        debian)
            execute apt-get remove $@
        ;;
            
        redhat)
            execute yum remove $@
        ;;
            
        alpine)
            execute apk remove $@
        ;;
    esac
}


function execute() 
{
    if [ "$EUID" -ne 0 ]; then sudo $@; else $@; fi
}

function command_resolver() 
{ 
    cmd=$1
    
    case $cmd in 
        useradd) echo "${password}" | passwd $username --stdin ;;
        usermod) if [ "$(plateform)" == "alpine" ]; then echo 'moduser'; fi;;
        *) echo $cmd ;;
    esac
    # name="INFRA_ADMIN_GROUP_UID LOGNAME INFRA_ADMIN_PASSWORD"
}

function servicectl() 
{
    local cmd=$1
    local svc=$2

    #https://www.cyberciti.biz/faq/centos-stop-start-restart-sshd-command/

    # echo "sudo yum install $@"
    case $cmd in 
        enable)
            case `plateform` in 
                alpine) rc-update add $svc;;
                redhat) if [ "$(plateform_version)" == "6" ]; then execute chkconfig $svc on; else execute systemctl enable $svc; fi ;;
            esac
            ;;
        disable)
            case `plateform` in 
                alpine) rc-update remove $svc;;
                redhat) if [ "$(plateform_version)" == "6" ]; then execute chkconfig $svc off; else execute systemctl disable $svc; fi ;;
            esac
            ;;
        *)
            case `plateform` in 
                redhat) if [ "$(plateform_version)" == "6" ]; then execute /etc/init.d/$svc $cmd; else  execute service $svc $cmd; fi ;;
                *) execute service $svc $cmd ;;
            esac
            ;;
    esac

}

#!/bin/bash


apache_install() {
    
    case `plateform` in 
        redhat)
            install -y httpd mod_ssl mod_fcgid
            sudo mkdir -p /etc/httpd/sites-enabled
            sudo mkdir -p /etc/httpd/sites-availables
            sudo chown apache:apache -R /etc/httpd/sites-enabled /etc/httpd/sites-availables
            # pip install mod_wsgi
            sudo chown apache:apache -R /etc/httpd
            sudo chmod -R g+w /etc/httpd
            ;;
        debian)
            ## https://ubiq.co/tech-blog/install-mod_wsgi-ubuntu/
            install -y apache2 apache2-utils libexpat1 ssl-cert libapache2-mod-wsgi # libapache2-mod-php
            a2enmod ssl
            # a2enconf mod-wsgi
            if ! getent passwd apache > /dev/null 2>&1; then
                sudo groupadd --system apache
                sudo useradd -d /var/apache2 -r -s /bin/false -g apache apache
            fi
            sudo chown apache:apache -R /etc/apache2
            sudo chmod -R g+w /etc/apache2
        ;;
    esac

    sudo mkdir -p /var/www/cgi-bin/
    # sudo chown apache:apache -R /var/www/cgi-bin/
    sudo chown apache:apache -R /var/www
    sudo chmod -R g+w /var/www

    if [[ -n "$ADMIN_USER" && $(getent passwd $ADMIN_USER)  ]];
    then
        sudo usermod -aG apache $ADMIN_USER;
    fi
    

# sudo cat > /etc/httpd/sites-availables/php-fcgi.conf << EOF
# # Configure multiple php version
# ScriptAlias /cgi-bin/ "/var/www/cgi-bin/"
# AddHandler php-fcgi .php
# #Action php55-fcgi /cgi-bin/php55.fcgi
# #Action php56-fcgi /cgi-bin/php56.fcgi
# #Action php71-fcgi /cgi-bin/php71.fcgi
# #Action php72-fcgi /cgi-bin/php72.fcgi
# #Action php73-fcgi /cgi-bin/php73.fcgi
# #Action php74-fcgi /cgi-bin/php74.fcgi
# EOF

# if [[ "$(rpm -E %{rhel})" == "6"  ]];
# then
#     sudo chkconfig httpd on
# else 
#     sudo systemctl enable httpd
# fi

}



# Reads arguments options
function read_application_arguments()
{
    ISDEFAULT=false;
    IS_SUPERUSER=0
    local long="help,force,default,superuser,data::,name::,version::,file::,log::,users-config::,config-file::,catalina-home::,install-dir::,port-offset::,config-dir::,data-dir::,home-dir::"
    long+=",db-name::,db-user::,db-password::,db-host::,db-port::"
    long+=",realm::,server-url::,server-user::,server-password::,admin-email::,url::,client::,audience::,secret::,login-theme::"
    long+=",postgresql-version::,postgis-version::"
    local TEMP=`getopt -o p::,f,h --long $long,password::,user::,email::,host::,port:: -n "$0" -- "$@"`

	eval set -- "$TEMP"
    # extract options and their arguments into variables.
    while true ; do
        case "$1" in
            -f|--force) FORCE=1 ; shift 1 ;;
            --default) IS_DEFAULT=1 ; shift 1 ;;
            --data) data=${2%"/"} ; shift 2 ;;
            --data-dir) data_dir=${2%"/"} ; shift 2 ;;
            --home-dir) home_dir=${2%"/"} ; shift 2 ;;
            --config-dir) config_dir=${2%"/"} ; shift 2 ;;
            --name) name=${2} ; shift 2 ;;
            --file) file=${2}; shift 2 ;;
            --log) log=${2}; shift 2 ;;
            --file-config) config_file=${2:-"$config_file"}; shift 2 ;;
            --version) version=${2:-"$version"}; shift 2 ;;
            --postgis-version) postgis_version=${2}; shift 2 ;;
            --postgresql-version) postgresql_version=${2}; shift 2 ;;
            --catalina-home) catalina_home=${2:-"$catalina_home"}; shift 2 ;;
            --users-config) users_config=${2:-"$users_config"}; shift 2 ;;
            --install-dir) INSTALL_DIR=${2:-"$INSTALL_DIR"}; shift 2 ;;
            --port-offset) port_offset=${2:-"$port_offset"}; shift 2 ;;
            --port) port=${2:-"$port"}; shift 2 ;;
            --user) user=${2:-"$user"}; shift 2 ;;
            --host) host=${2:-"$host"}; shift 2 ;;
            --password) password=${2:-"$password"}; shift 2 ;;
            --superuser) IS_SUPERUSER=1 ; shift 1 ;;
            --db-name) DB_NAME=${2:-"$DB_NAME"}; shift 2 ;;
            --db-user) DB_USER=${2:-"$DB_USER"}; shift 2 ;;
            --db-password) DB_PASSWORD=${2:-"$DB_PASSWORD"}; shift 2 ;;
            --db-host) DB_HOST=${2:-"$DB_HOST"}; shift 2 ;;
            --db-port) DB_PORT=${2:-"$DB_PORT"}; shift 2 ;;
            --realm) realm=${2:-"$realm"}; shift 2 ;;
            --email) email=${2:-"$email"}; shift 2 ;;
            --url) url=${2:-"$url"}; shift 2 ;;
            --server-url) server_url=${2:-"$url"}; shift 2 ;;
            --server-user) server_user=${2}; shift 2 ;;
            --server-password) server_password=${2}; shift 2 ;;
            --client) client=${2:-"$client"}; shift 2 ;;
            --audience) audience=${2:-"$audience"}; shift 2 ;;
            --secret) secret=${2:-"$secret"}; shift 2 ;;
            --login-theme) loginTheme=${2:-"$loginTheme"}; shift 2 ;;
            --) shift ; break ;;
            *) echo "Internal error! $1" ; exit 1 ;;
        esac
    done

    shift $(expr $OPTIND - 1 )
    _parameters=$@
    
  # fi
}
#!/bin/bash

# Install blazegraph


function blazegraph_install() 
{
    set -e
    local appName=blazegraph
    local FORCE=0
    local IS_DEFAULT=0
    local version=$BLAZEGRAPH_DEFAULT_VERSION
    local data=/var/lib
    local name=
    local catalina_home=$CATALINA_HOME
    local data_dir=
    local config_dir=
    # local file_config=
    # echo $@

    local _parameters=
    read_application_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi

    name=${name:-"$appName-$version"}
    name=${name//./-/}

    if [ '1' == $IS_DEFAULT ]; then 
        # catalina_home=/usr/share/tomcat; 
        name=$appName
    fi

    if [ -z $catalina_home ]; then
        echo "If not --default, --catalina_home value is required"
        exit 1
    fi

    if [ '1' == $FORCE ]; then 
        sudo rm -f ${catalina_home}/webapps/${name}.war
    fi

    if [ -f ${catalina_home}/webapps/${name}.war ]
    then 
        echo "Current file already exist: ${catalina_home}/webapps/${name}.war"
        exit 0
    fi

    case "$version" in

        "2") version=2.1.5;;

        *)
        ;;
    esac

    if [ ! -f /tmp/releases/blazegraph-$version.war ];
    then
        echo "https://github.com/blazegraph/database/releases/download/BLAZEGRAPH_RELEASE_${version//\./_}/blazegraph.war -o /tmp/releases/blazegraph-$version.war"
        curl -fSL https://github.com/blazegraph/database/releases/download/BLAZEGRAPH_RELEASE_${version//\./_}/blazegraph.war -o /tmp/releases/blazegraph-$version.war
    fi

    sudo cp -f /tmp/releases/blazegraph-$version.war ${catalina_home}/webapps/${name}.war

    if [ -z $data_dir ]; then
        data_dir="${data}/${name}"
    fi

    if [ -z $config_dir ]; then
        config_dir="/etc/${name}"
    fi

    sudo mkdir -p $data_dir $config_dir
    # sudo chown tomcat:tomcat $data_dir/ $config_dir
    if [ -d /etc/tomcat ]; then
        echo 'JAVA_OPTS="-Dcom.bigdata.rdf.sail.webapp.ConfigParams.propertyFile='$config_dir'/RWStore.properties"'| sudo tee -a /etc/tomcat/$name.conf
    fi
    if [ -f /etc/profile.d/java.sh ]; then
        echo 'export JAVA_OPTS="$JAVA_OPTS -Dcom.bigdata.rdf.sail.webapp.ConfigParams.propertyFile='$config_dir'/RWStore.properties"' | sudo tee -a /etc/profile.d/java.sh
    fi
    
    if [ ! -f $config_dir/blazegraph.properties ]; then 
        sudo cat > $config_dir/blazegraph.properties << EOF
com.bigdata.rdf.sail.isolatableIndices=false
com.bigdata.rdf.store.AbstractTripleStore.justify=true
com.bigdata.rdf.sail.truthMaintenance=true
com.bigdata.rdf.sail.namespace=islandora
com.bigdata.rdf.store.AbstractTripleStore.quads=false
com.bigdata.namespace.islandora.lex.com.bigdata.btree.BTree.branchingFactor=400
com.bigdata.journal.Journal.groupCommit=false
com.bigdata.namespace.islandora.spo.com.bigdata.btree.BTree.branchingFactor=1024
com.bigdata.rdf.store.AbstractTripleStore.geoSpatial=false
com.bigdata.rdf.store.AbstractTripleStore.statementIdentifiers=false
EOF
    fi

    if [ ! -f $config_dir/RWStore.properties ]; then 
        sudo cat > $config_dir/RWStore.properties << EOF
com.bigdata.journal.AbstractJournal.file=$data_dir/bigdata.jnl
com.bigdata.journal.AbstractJournal.bufferMode=DiskRW
com.bigdata.service.AbstractTransactionService.minReleaseAge=1
com.bigdata.journal.Journal.groupCommit=false
com.bigdata.btree.writeRetentionQueue.capacity=4000
com.bigdata.btree.BTree.branchingFactor=128
com.bigdata.journal.AbstractJournal.initialExtent=209715200
com.bigdata.journal.AbstractJournal.maximumExtent=209715200
com.bigdata.rdf.sail.truthMaintenance=false
com.bigdata.rdf.store.AbstractTripleStore.quads=true
com.bigdata.rdf.store.AbstractTripleStore.statementIdentifiers=false
com.bigdata.rdf.store.AbstractTripleStore.textIndex=false
com.bigdata.rdf.store.AbstractTripleStore.axiomsClass=com.bigdata.rdf.axioms.NoAxioms
com.bigdata.namespace.kb.lex.com.bigdata.btree.BTree.branchingFactor=400
com.bigdata.namespace.kb.spo.com.bigdata.btree.BTree.branchingFactor=1024
com.bigdata.journal.Journal.collectPlatformStatistics=false
EOF
    fi
    
    # https://nvbach.blogspot.com/2019/04/installing-blazegraph-on-linux-debian.html


    # mkdir -p $config_dir/
    # chown tomcat:tomcat -R $config_dir/
    echo ">> Installed application '$appName' (version = $version) in ${catalina_home}/webapps/${name}.war"
}

## detect if a script is being sourced or not
# if [[ $_ == $0 ]] 
# then
#   blazegraph_install $@
# fi

#!/bin/bash

# Reads arguments options
function parse_elk_arguments()
{
    local TEMP=`getopt -o p:: --long version::,beats:: -n "$0" -- "$@"`
    
	eval set -- "$TEMP"
    # extract options and their arguments into variables.
    while true ; do
        case "$1" in
            --version) version=${2:-"$version"}; shift 2 ;;
            # --tomcat-config) tomcat_config=${2:-"$tomcat_config"}; shift 2 ;;
            --users-config) users_config=${2:-"$users_config"}; shift 2 ;;
            # --db-name) DB_NAME=${2:-"$DB_NAME"}; shift 2 ;;
            # --db-user) DB_USER=${2:-"$DB_USER"}; shift 2 ;;
            # --db-password) DB_PASSWORD=${2:-"$DB_PASSWORD"}; shift 2 ;;
            # --db-host) DB_HOST=${2:-"$DB_HOST"}; shift 2 ;;
            # --db-port) DB_PORT=${2:-"$DB_PORT"}; shift 2 ;;
            --) shift ; break ;;
            *) echo "Internal error! $1" ; exit 1 ;;
        esac
    done

    shift $(expr $OPTIND - 1 )
    _parameters=$@
    
  # fi
}

elk_import_repolist() {
    # echo $(plateform)
    case `plateform` in 
        debian)
            # echo "debian"
            if [[ ! -f /etc/apt/sources.list.d/elastic-$version.x.list ]]; then
                wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
                echo "deb https://artifacts.elastic.co/packages/$version.x/apt stable main" | sudo tee -a /etc/apt/sources.list.d/elastic-$version.x.list
                sudo apt-get -y update
            fi
            ;;
        redhat)
            # echo "redhat"
            if [[ ! -f /etc/yum.repos.d/elasticsearch-${version}.x.repo ]]; then
                sudo cat > /etc/yum.repos.d/elasticsearch-${version}.x.repo << EOF
[elasticsearch-${version}.x]
name=Elasticsearch repository for ${version}.x packages
baseurl=https://artifacts.elastic.co/packages/${version}.x/yum
gpgcheck=1
gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch
enabled=1
autorefresh=1
type=rpm-md
EOF
            # sudo rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch
        fi
        ;;
    esac

    # # if [[ is_debian && ! -f /etc/apt/sources.list.d/elastic-$version.x.list ]]; then
    # #     wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
    # #     echo "deb https://artifacts.elastic.co/packages/$version.x/apt stable main" | sudo tee -a /etc/apt/sources.list.d/elastic-$version.x.list
    # #     sudo apt-get -y update
    # # fi
    # # snake_to_camel test
    # if [[  `is_redhat`  ]]; then
    #     # echo $(is_debian)
    #     echo $(awk -F= '/^ID_LIKE=/{print $2}' /etc/os-release)
    # # fi
    # fi
}

# elk_import_deb() {
#     if [ ! -f /etc/apt/sources.list.d/elastic-$version.x.list ]
#     then 
#         wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
#         echo "deb https://artifacts.elastic.co/packages/$version.x/apt stable main" | sudo tee -a /etc/apt/sources.list.d/elastic-$version.x.list
#         sudo apt-get -y update
#     fi
# }

elk_install_beats() {
    elk_import_repolist
    install -y filebeat auditbeat metricbeat packetbeat heartbeat-elastic
}

elk_install() {
    local version=7
    local _parameters=
    parse_elk_arguments $@ 
    
    elk_import_repolist
    install -y elasticsearch kibana
}

elasticsearch_install() {
    local version=7
    local _parameters=
    parse_elk_arguments $@ 
    
    elk_import_repolist
    install -y elasticsearch

    if [[ -n "$ADMIN_USER" && $(getent passwd $ADMIN_USER)  ]]; then sudo usermod -aG elasticsearch $ADMIN_USER; fi
    
    sed -i -e "s/^\#\# -Xms.*$/-Xms512m/" /etc/elasticsearch/jvm.options
    sed -i -e "s/^## -Xmx.*$/-Xmx512m/" /etc/elasticsearch/jvm.options
    sed -i -e "s/^#transport.host: .*/transport.host: 0.0.0.0/" /etc/elasticsearch/elasticsearch.yml
    sed -i -e "s/http.host: .*/http.host: 0.0.0.0/" /etc/elasticsearch/elasticsearch.yml
    sed -i -e "s/^#http.host: .*/http.host: 0.0.0.0/" /etc/elasticsearch/elasticsearch.yml
    execute systemctl enable elasticsearch
}

kibana_install() {
    local version=7
    local _parameters=
    parse_elk_arguments $@ 
    
    elk_import_repolist
    install -y kibana
    execute systemctl enable kibana
}

## detect if a script is being sourced or not
# if [[ $_ == $0 ]] 
# then
# 	elk_install "$@"
# fi





#!/bin/bash

# Install fedora commons repository



function fcrepo_install() 
{
    set -e
    local FORCE=0
    local IS_DEFAULT=0
    local version=$FCREPO_DEFAULT_VERSION
    local data=/var/lib
    local name=
    local catalina_home=$CATALINA_HOME
    local fcrepo_config=
    local file_config=
    # echo $@

    local _parameters=
    read_application_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi

    name=${name:-"fcrepo$version"}
    name=${name//./-/}

    if [ '1' == $IS_DEFAULT ]; then 
        catalina_home=/usr/share/tomcat; 
        name=fcrepo
    fi

    if [ -z $catalina_home ]; then
        echo " --catalina_home value is required"
        exit 1
    fi

    if [ '1' == $FORCE ]; then 
        sudo rm -f ${catalina_home}/webapps/${name}.war
    fi

    if [ -f ${catalina_home}/webapps/${name}.war ]
    then 
        echo "Current file already exist: ${catalina_home}/webapps/${name}.war"
        exit 0
    fi


    # https://github.com/fcrepo/fcrepo/releases/download/fcrepo-5.1.0/fcrepo-webapp-5.1.0.war
    # 
    # https://github.com/fcrepo4/fcrepo4/releases/download/fcrepo-4.7.5/fcrepo-webapp-4.7.5.war

    case "$version" in
        "4") version=4.7.5;;
        "5") version=5.1.1;;
        "6") version=6.1.1;;
        *)
        ;;
    esac
    
    
    if [ ! -f /tmp/releases/fcrepo-webapp-$version.war ];
    then 
        curl -fSL https://github.com/fcrepo/fcrepo/releases/download/fcrepo-$version/fcrepo-webapp-$version.war -o /tmp/releases/fcrepo-webapp-$version.war
    fi

    sudo cp -f /tmp/releases/fcrepo-webapp-$version.war ${catalina_home}/webapps/${name}.war

    # sudo curl -fSL https://github.com/fcrepo4-exts/fcrepo-webapp-plus/releases/download/fcrepo-webapp-plus-$version/fcrepo-webapp-plus-$fcrepo_config$version.war -o ${catalina_home}/webapps/${name}.war
    #
    local ModeshapeConfig=file-simple
    local JDBCConfig=

    if [ -z $data_dir ]; then
        data="${data}/${name}"
    fi
    # ARG FCREPO_DIR=${APP_DIR}/fcrepo
    sudo mkdir -p $data_dir && sudo chown tomcat:tomcat -R $data_dir
    if [ -f $catalina_home/conf/tomcat.conf ]; then 
        sudo sed -i -e "/JAVA_OPTS=\"-Dfcrepo.*/d" $catalina_home/conf/tomcat.conf
    fi
    sudo echo 'JAVA_OPTS="-Dfcrepo.modeshape.configuration=classpath:/config/'$ModeshapeConfig'/repository.json '$JDBCConfig' -Dfcrepo.home='$data_dir' -Dfcrepo.audit.container=/audit"' >> $catalina_home/conf/tomcat.conf \
    # sudo mv fcrepo-$fcrepo_config$version.war "${catalina_home}/webapps/${name}.war"

    sudo echo "JAVA_OPTS='$JAVA_OPTS -Dfcrepo.modeshape.configuration=classpath:/config/$ModeshapeConfig/repository.json $JDBCConfig -Dfcrepo.home=$data_dir -Dfcrepo.audit.container=/audit'"  >> /etc/profile.d/fcrepo.sh
    # sudo mkdir -p /etc/${name}
    # sudo chown tomcat:tomcat /etc/${name}

    echo ">> Installed application '$name' (version = $version) in ${catalina_home}/webapps/${name}.war"
}

## detect if a script is being sourced or not
# if [[ $_ == $0 ]] 
# then
#   fcrepo_install $@
# fi

#!/bin/bash



fuseki_install() {
    
    local _name=fuseki
    local FORCE=0
    local IS_DEFAULT=0
    local version=$FUSEKI_DEFAULT_VERSION
    local data=/var/lib
    local name=
    local catalina_home=
    
    local _parameters=
    read_application_arguments $@
    if [ -n "$_parameters" ]; then set $_parameters; fi

    local repo_url=downloads.apache.org
    case "$version" in
        "4") version=4.1.0;;
        "3") version=3.14.0; repo_url=archive.apache.org/dist ;;
        *)
        ;;
    esac

    local givenname=$name
    name="$_name-$version"

    if [ '1' == $FORCE ]; then 
        sudo rm -rf $INSTALL_DIR/$name
    fi
    
    if [ -d $INSTALL_DIR/$name ]
    then 
        echo "Application already installed into  $INSTALL_DIR/$name"
        exit 0
    fi


    # name=${name//./-/}



    # local name=fuseki
    # local data=
    # local version=3.14.0
    # local install_dir=/usr/share
    # local catalina_home=${CATALINA_HOME:-"/usr/share/tomcat"}


    if [ ! -f /tmp/releases/apache-jena-fuseki-$version.tar.gz ];
    then 
        echo "https://$repo_url/jena/binaries/apache-jena-fuseki-$version.tar.gz -o /tmp/releases/apache-jena-fuseki-$version.tar.gz"
        curl -fSL https://$repo_url/jena/binaries/apache-jena-fuseki-$version.tar.gz -o /tmp/releases/apache-jena-fuseki-$version.tar.gz
        # curl -fSL https://archive.apache.org/dist/jena/binaries/apache-jena-fuseki-$version.tar.gz -o /tmp/releases/apache-jena-fuseki-$version.tar.gz
    fi
    
    # sudo cp -f /tmp/releases/fcrepo-webapp-$version.war ${catalina_home}/webapps/${name}.war

    # curl -fSL https://archive.apache.org/dist/jena/binaries/apache-jena-fuseki-$version.tar.gz -o apache-jena-fuseki-$version.tar.gz
    sudo tar -xzf /tmp/releases/apache-jena-fuseki-$version.tar.gz -C $INSTALL_DIR
    sudo mv $INSTALL_DIR/apache-jena-fuseki-${version} $INSTALL_DIR/$name


    if [ '1' == $IS_DEFAULT ]; then 
        catalina_home=/usr/share/tomcat; 
        givename=$_name
        sudo rm -rf /usr/share/$_name
        sudo ln -s $INSTALL_DIR/$name /usr/share/$_name
    fi

    if [ -d $catalina_home/webapps ]; then
        if [ '1' == $FORCE ]; then sudo rm -f ${catalina_home}/webapps/${name}.war ; fi
        
        if [ ! -f ${catalina_home}/webapps/${name}.war ]
        then 
            sudo cp -f "$INSTALL_DIR/${name}/fuseki.war" ${catalina_home}/webapps/${givename:-$name}.war
        fi

    fi

    


    # sudo cp -f "$INSTALL_DIR/fuseki-${version}/fuseki.war" "${catalina_home}/webapps/$name.war"


    # mkdir -p /etc/$name/configuration
    # chown tomcat:tomcat -R /etc/$name
    echo ">> Installed application '$_name' (version = $version) in $INSTALL_DIR/${name}"
}
#!/bin/bash

# Install grafana 
# https://www.fosslinux.com/8328/how-to-install-and-configure-grafana-on-centos-7.htm

# Reads arguments options
function parse_grafana_arguments()
{
  # if [ $# -ne 0 ]; then
    local TEMP=`getopt -o p:: --long data::,version::,port::,config-file:: -n "$0" -- "$@"`
    
	eval set -- "$TEMP"
    # extract options and their arguments into variables.
    while true ; do
        case "$1" in
            --install-dir) INSTALL_DIR=${2:-"$INSTALL_DIR"} ; shift 2 ;;
            --data) data=${2%"/"} ; shift 2 ;;
            --file-config) config_file=${2:-"$config_file"}; shift 2 ;;
            --version) version=${2:-"$version"}; shift 2 ;;
            --port) port=${2:-"$port"}; shift 2 ;;
            --users-config) users_config=${2:-"$users_config"}; shift 2 ;;
            # --db-name) DB_NAME=${2:-"$DB_NAME"}; shift 2 ;;
            # --db-user) DB_USER=${2:-"$DB_USER"}; shift 2 ;;
            # --db-password) DB_PASSWORD=${2:-"$DB_PASSWORD"}; shift 2 ;;
            # --db-host) DB_HOST=${2:-"$DB_HOST"}; shift 2 ;;
            # --port) port=${2:-"$port"}; shift 2 ;;
            --) shift ; break ;;
            *) echo "Internal error! $1" ; exit 1 ;;
        esac
    done

    shift $(expr $OPTIND - 1 )
    _parameters=$@
    
  # fi
}

function grafana_install() 
{
    set -e
      
    if [ ! -f /etc/yum.repos.d/grafana.repo ]; then 
        sudo cat > /etc/yum.repos.d/grafana.repo << EOF
[grafana]
name=grafana
baseurl=https://packages.grafana.com/oss/rpm
repo_gpgcheck=1
enabled=1
gpgcheck=1
gpgkey=https://packages.grafana.com/gpg.key
sslverify=1
sslcacert=/etc/pki/tls/certs/ca-bundle.crt
EOF
    fi
    
    install -y grafana
    install -y fontconfig freetype* urw-fonts

    # sudo systemctl enable grafana-server.service

}


#!/bin/bash


httpd_install() {
    
    case `plateform` in 
        redhat)
            install -y httpd mod_ssl mod_fcgid
            sudo mkdir -p /etc/httpd/sites-enabled
            sudo mkdir -p /etc/httpd/sites-availables
            sudo chown apache:apache -R /etc/httpd/sites-enabled /etc/httpd/sites-availables
            # pip install mod_wsgi
            sudo chown apache:apache -R /etc/httpd
            sudo chmod -R g+w /etc/httpd
            ;;
        debian)
            exit 0
            # ## https://ubiq.co/tech-blog/install-mod_wsgi-ubuntu/
            # install -y apache2 apache2-utils libexpat1 ssl-cert libapache2-mod-wsgi # libapache2-mod-php
            # a2enmod ssl
            # # a2enconf mod-wsgi
            # if ! getent passwd apache > /dev/null 2>&1; then
            #     sudo groupadd --system apache
            #     sudo useradd -d /var/apache2 -r -s /bin/false -g apache apache
            # fi
            # sudo chown apache:apache -R /etc/apache2
            # sudo chmod -R g+w /etc/apache2
        ;;
    esac

    sudo mkdir -p /var/www/cgi-bin/
    sudo chown apache:apache -R /var/www
    sudo chmod -R g+w /var/www

    if [[ -n "$ADMIN_USER" && $(getent passwd $ADMIN_USER)  ]];
    then
        sudo usermod -aG apache $ADMIN_USER;
    fi
    

# sudo cat > /etc/httpd/sites-availables/php-fcgi.conf << EOF
# # Configure multiple php version
# ScriptAlias /cgi-bin/ "/var/www/cgi-bin/"
# AddHandler php-fcgi .php
# #Action php55-fcgi /cgi-bin/php55.fcgi
# #Action php56-fcgi /cgi-bin/php56.fcgi
# #Action php71-fcgi /cgi-bin/php71.fcgi
# #Action php72-fcgi /cgi-bin/php72.fcgi
# #Action php73-fcgi /cgi-bin/php73.fcgi
# #Action php74-fcgi /cgi-bin/php74.fcgi
# EOF

# if [[ "$(rpm -E %{rhel})" == "6"  ]];
# then
#     sudo chkconfig httpd on
# else 
#     sudo systemctl enable httpd
# fi

}

#!/bin/bash

# Install fedora commons repository



function java_install() 
{
    set -e
    local FORCE=0
    local IS_DEFAULT=0
    local version=
    # echo $@

    local _parameters=
    read_application_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi

    plateform=`plateform`

    case $plateform in 
        redhat)
			if [[ `plateform_version` =~ 6 ]]; then 
                install -y java-1.8.0-openjdk-devel; 
            else 
                install -y java-11-openjdk-devel; 
            fi
            ;;
        debian)
            install -y default-jdk
        ;;
        *)
            echo ">> Noy implemented script for plateform: $plateform"
        ;;
    esac
}


#!/bin/bash

function keycloak_install() 
{
    set -e

    local appName=keycloak

    local FORCE=0
    local IS_DEFAULT=0
    local version=$KEYCLOAK_DEFAULT_VERSION
    # local data=/var/lib
    local name=
    # local catalina_home=
    # local fcrepo_config=
    # local file_config=
    # echo $@


    # local version=8.0.1
    # local name=keycloak
    # local INSTALL_DIR=/usr/share
    # local port_offset=100

    local _parameters=
    read_application_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi



    case "$version" in
        "8") version=8.0.2;;
        17|16|15|14|13|12|11|10) version=$version.0.0;;
        *)
        ;;
    esac

    name="$appName-$version"
    local KEYCLOAK_HOME=${INSTALL_DIR}/$name

    if [ -d $KEYCLOAK_HOME ]
    then 
        if [ '0' == $FORCE ]; then 
            # sudo rm -rf $INSTALL_DIR/$name
            echo "Application already installed into  $INSTALL_DIR/$name"
            exit 0
        fi
    fi


    # _PORT=${3:-"8088"}

    ## Install keycloak
    # https://blog.ineat-conseil.fr/2017/11/securisez-vos-apis-spring-avec-keycloak-1-installation-de-keycloak/
    # https://medium.com/@hasnat.saeed/setup-keycloak-server-on-ubuntu-18-04-ed8c7c79a2d9
    mkdir -p $KEYCLOAK_HOME;
    
    if [ ! -f /tmp/releases/keycloak-${version}.tar.gz ];
    then
        echo "https://github.com/keycloak/keycloak/releases/download/${version}/keycloak-${version}.tar.gz"
        curl -fSL https://github.com/keycloak/keycloak/releases/download/${version}/keycloak-${version}.tar.gz -o /tmp/releases/keycloak-${version}.tar.gz;
    fi
    
    tar -xzf /tmp/releases/keycloak-${version}.tar.gz -C $KEYCLOAK_HOME --strip-components=1;

    if ! getent passwd $appName > /dev/null 2>&1; then
        sudo groupadd --system $appName
        sudo useradd -d /var/www -r -s /bin/false -g $appName $appName
    fi
    
    chown -R $appName:$appName $KEYCLOAK_HOME;
    chmod g+w -R $KEYCLOAK_HOME
    chmod o+x $KEYCLOAK_HOME/bin/


    mkdir -p $KEYCLOAK_HOME/modules/org/postgresql/main
    if [ ! -f $KEYCLOAK_HOME/modules/org/postgresql/main/postgresql-42.2.5.jar ]
    then
        if [ ! -f /tmp/releases/postgresql-42.2.5.jar ]; then
            curl -fSL https://jdbc.postgresql.org/download/postgresql-42.2.5.jar -o /tmp/releases/postgresql-42.2.5.jar
        fi
        sudo cp /tmp/releases/postgresql-42.2.5.jar $KEYCLOAK_HOME/modules/org/postgresql/main/
    fi

    if [ ! -f $KEYCLOAK_HOME/modules/org/postgresql/main/module.xml ]
    then
        sudo cat > $KEYCLOAK_HOME/modules/org/postgresql/main/module.xml <<  EOF
<?xml version="1.0" ?>
<module xmlns="urn:jboss:module:1.3" name="org.postgresql">
    <resources>
        <resource-root path="postgresql-42.2.5.jar"/>
    </resources>
    <dependencies>
        <module name="javax.api"/>
        <module name="javax.transaction.api"/>
    </dependencies>
</module>
EOF
        $KEYCLOAK_HOME/bin/jboss-cli.sh 'embed-server,/subsystem=datasources/jdbc-driver=postgresql:add(driver-name=postgresql,driver-module-name=org.postgresql,driver-xa-datasource-class-name=org.postgresql.xa.PGXADataSource)'
    fi

    # curl -fSL https://jdbc.postgresql.org/download/postgresql-42.2.5.jar -o $KEYCLOAK_HOME/postgresql-42.2.5.jar
    # $KEYCLOAK_HOME/bin/jboss-cli.sh -c "module add --name=org.postgresql  --dependencies=javax.api,javax.transaction.api --resources=postgresql-42.2.5.jar"

    mkdir -p $KEYCLOAK_HOME/modules/org/mysql/main
    if [ ! -f $KEYCLOAK_HOME/modules/org/mysql/main/mysql-connector-java-5.1.47.jar ]
    then
        if [ ! -f /tmp/releases/mysql-connector-java-5.1.47.tar.gz ]; then
            curl -fSL https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.47.tar.gz -o /tmp/releases/mysql-connector-java-5.1.47.tar.gz
        fi
        tar -xzf /tmp/releases/mysql-connector-java-5.1.47.tar.gz mysql-connector-java-5.1.47/mysql-connector-java-5.1.47.jar --strip-components=1
        sudo mv mysql-connector-java-5.1.47.jar $KEYCLOAK_HOME/modules/org/mysql/main/
    fi

    # curl -fSL https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.47.tar.gz -o /tmp/releases/mysql-connector-java-5.1.47.tar.gz
    # tar -xzf /tmp/releases/mysql-connector-java-5.1.47.tar.gz mysql-connector-java-5.1.47/mysql-connector-java-5.1.47.jar --strip-components=1
    # cp -f mysql-connector-java-5.1.47.jar $KEYCLOAK_HOME
    # # $KEYCLOAK_HOME/bin/jboss-cli.sh -c "module add --name=org.mysql  --dependencies=javax.api,javax.transaction.api --resources=mysql-connector-java-5.1.47.jar"


    cp -f $KEYCLOAK_HOME/docs/contrib/scripts/systemd/launch.sh $KEYCLOAK_HOME/bin/
    sed -i -e "s|/opt/wildfly|$KEYCLOAK_HOME|" $KEYCLOAK_HOME/bin/launch.sh;
    if [ -n "$port_offset" ]; then
        sed -i -e "s|standalone.sh.*|standalone.sh -c \$2 -b \$3 -Djboss.socket.binding.port-offset=$port_offset |" $KEYCLOAK_HOME/bin/launch.sh;
    fi

#  $WILDFLY_MODE $WILDFLY_CONFIG $WILDFLY_BIND
# /usr/share/keycloak/bin/standalone.sh -c standalone.xml -b 0.0.0.0 -Djboss.socket.binding.port-offset=100
    sudo mkdir -p /etc/$appName
    if [ ! -f /etc/$appName/$name.conf ];
    then 
        sudo cp -f $KEYCLOAK_HOME/docs/contrib/scripts/systemd/wildfly.conf /etc/$appName/$name.conf;
        
    fi
    sudo chown -R keycloak:keycloak /etc/keycloak
    
    if [[ -n "$ADMIN_USER" && $(getent passwd $ADMIN_USER)  ]]; then sudo usermod -aG keycloak $ADMIN_USER; fi


    if [[ "6" != $OS_VERSION ]]; then
        sudo cat > /etc/systemd/system/$name.service << EOF
[Unit]
Description=The Keycloak Server $version
After=syslog.target network.target
#Before=httpd.service

[Service]
Environment=LAUNCH_JBOSS_IN_BACKGROUND=1
EnvironmentFile=/etc/$appName/$name.conf
#User=keycloak
LimitNOFILE=102642
PIDFile=$KEYCLOAK_HOME/keycloak.pid
ExecStart=$KEYCLOAK_HOME/bin/launch.sh \$WILDFLY_MODE \$WILDFLY_CONFIG \$WILDFLY_BIND
StandardOutput=null

[Install]
WantedBy=multi-user.target
EOF
        if [ '1' == $IS_DEFAULT ]; then 
            sudo rm -f /etc/systemd/system/$appName.service
            sudo cp /etc/systemd/system/$name.service /etc/systemd/system/$appName.service
        fi

        # sudo systemctl daemon-reload
    fi

    if [ '1' == $IS_DEFAULT ]; then 
        sudo rm -rf /usr/share/$appName
        sudo ln -s $KEYCLOAK_HOME /usr/share/$appName
    fi

    # sudo rm -f $KEYCLOAK_HOME/standalone/configuration/keycloak-add-user.json
    # $KEYCLOAK_HOME/bin/add-user-keycloak.sh -u admin -p admin -r master
    
    echo ">> Installed application '$appName' (version = $version) in $INSTALL_DIR/${name}"
}

keycloak_connect()
{
    local home_dir=${KEYCLOAK_HOME:-"$INSTALL_DIR/keycloak"}
    local server_url='http://localhost:8180/auth'
    local server_user=${KEYCLOAK_ADMIN_USER:-admin}
    local server_password=${KEYCLOAK_ADMIN_PASSWORD:-admin}
    # local mrealm=${1:-master}
    local _parameters=
    read_application_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi

    if [ -f $home_dir/bin/kcadm.sh ]; then
        # echo "$home_dir/bin/kcadm.sh config credentials --realm master --server $server_url --user $server_user --password $server_password"
        $home_dir/bin/kcadm.sh config credentials --server $server_url --realm master --user $server_user --password $server_password
    else
        echo "ERROR: not found kcadm.sh in $home_dir/bin/"
        exit 1
    fi
}

keycloak_add_realm()
{
    keycloak_connect $@ 

    local home_dir=${KEYCLOAK_HOME:-"$INSTALL_DIR/keycloak"}
    local _parameters=
    read_application_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi


    kcadm=$home_dir/bin/kcadm.sh
    if [ ! -f $home_dir/bin/kcadm.sh ]; then
        echo "ERROR: not found kcadm.sh in $home_dir/bin/"
        exit 1
    fi

	_REALM_NAME=${realm:-"$name"}
	_REALM_ADMIN_USER=${user:-"$_REALM_NAME"}
	_REALM_ADMIN_PASSWORD=${password:-${_REALM_NAME}123}
	_REALM_CLIENT=${client:-"$_REALM_NAME-auth"}
	_REALM_CLIENT_AUDIENCE=${audience:-'audience'}
	_REALM_CLIENT_SECRET=${secret:-'597eefcc-d46e-4d30-8a37-7f6d2e85c233'}
	# _REALM_ROLES=${REALM_ROLES}

    local args=''
    if [ -n "$loginTheme" ]; then args+=" -s loginTheme=$loginTheme"; fi

	# Now let's create a Realm named "wildfly-realm":
	$kcadm create realms -s realm=$_REALM_NAME -s enabled=true $args

	# add a role for our user, that will match with the Role in the APP
	# for role in $_REALM_ROLES ; do $kcadm create roles -r $_REALM_NAME -s name=$role; done

	$kcadm create roles -r $_REALM_NAME -s name=maintainer;
	$kcadm add-roles -r $_REALM_NAME  \
		--rname maintainer \
		--cclientid realm-management \
		--rolename manage-authorization \
		--rolename manage-users \
		--rolename view-users

	# Realm's client
	CID=$($kcadm create clients \
		-r $_REALM_NAME \
		-s clientId=$_REALM_CLIENT \
		-s publicClient="true" \
		-s enabled=true \
		-s clientAuthenticatorType=client-secret \
		-s secret=$_REALM_CLIENT_SECRET \
		-s 'redirectUris=["*"]'  \
		-s 'directAccessGrantsEnabled=true'  \
		-i
	)

	# audience
	$kcadm create clients/$CID/protocol-mappers/models -r $_REALM_NAME \
		-s name=$_REALM_CLIENT_AUDIENCE \
		-s protocol=openid-connect \
		-s protocolMapper=oidc-audience-mapper \
		-s 'config."included.client.audience"="'$_REALM_CLIENT'"' \
		-s 'config."id.token.claim"="true"' \
		-s 'config."access.token.claim"="true"'

	## Then we add an admin user for this realm:
	$kcadm create users -r $_REALM_NAME \
		-s username="$_REALM_ADMIN_USER" \
		-s email="${email:-"$_REALM_ADMIN_USER@$_REALM_NAME.org"}" \
		-s enabled=true
	$kcadm set-password -r $_REALM_NAME --username $_REALM_ADMIN_USER --new-password "$_REALM_ADMIN_PASSWORD"
	$kcadm add-roles -r $_REALM_NAME --uusername $_REALM_ADMIN_USER --rolename maintainer

    echo "===>> Realm's clientID: $CID"
}
#!/bin/bash

# https://www.thegeekstuff.com/2015/01/openldap-linux/
# https://www.itzgeek.com/how-tos/linux/centos-how-tos/step-step-openldap-server-configuration-centos-7-rhel-7.html
# https://community.cloudera.com/t5/Community-Articles/How-to-setup-OpenLDAP-2-4-on-CentOS-7/ta-p/249263
# # https://www.tecmint.com/install-openldap-server-for-centralized-authentication/
# https://linuxhostsupport.com/blog/how-to-install-ldap-on-centos-7/

# centos 7



ldap_install() {
    _major_centos_version=$(rpm -E %{rhel})
    if [[ "$_major_centos_version" == "7" ]];
    then 
        install -y openldap compat-openldap openldap-clients openldap-servers openldap-servers-sql openldap-devel
    fi

    if [[ "$_major_centos_version" == "8" ]];
    then 
        # for centos 8 -> https://kifarunix.com/install-and-setup-openldap-on-centos-8/
        # for centos 8 -> https://repo.symas.com/sofl/rhel8/
        # yum config-manager --add-repo https://repo.symas.com/configs/SOFL/rhel8/sofl.repo
        # yum update
        install -y symas-openldap-clients symas-openldap-servers
    fi
}

## detect if a script is being sourced or not
# if [[ $_ == $0 ]] 
# then
# 	ldap_install "$@"
# fi
#!/bin/bash

# Install mariadb https://www.tecmint.com/install-mariadb-in-centos-6/

function mariadb_install() 
{
    set -e
    local _version="${1:-"5.7"}"
	local MYSQL_RPM="mysql57-community-release-el7-9.noarch.rpm"
    
	if [[ $_version =~ ^8.*$ ]];
	then 
		MYSQL_RPM=mysql80-community-release-el7-1.noarch.rpm
	fi
     
	install -y https://dev.mysql.com/get/$MYSQL_RPM 
	# wget https://dev.mysql.com/get/$MYSQL_RPM
	# rpm -ivh "${MYSQL_RPM}" && \
	yum -y install mysql-server &&
	systemctl enable mysqld
	
	# mysqld --initialize-insecure --user=mysql; 
}

# ## detect if a script is being sourced or not
# if [[ $_ == $0 ]] 
# then
# 	mariadb_install "$@"
# fi
#!/bin/bash

mongodb_install() {
    echo "[MongoDB]" > /etc/yum.repos.d/mongodb.repo; \
    echo "name=MongoDB Repository" >> /etc/yum.repos.d/mongodb.repo; \
    echo "baseurl=http://repo.mongodb.org/yum/redhat/7/mongodb-org/4.2/x86_64/" >> /etc/yum.repos.d/mongodb.repo; \
    echo "gpgcheck=1" >> /etc/yum.repos.d/mongodb.repo; \
    echo "enabled=1" >> /etc/yum.repos.d/mongodb.repo; \
    echo "gpgkey=https://www.mongodb.org/static/pgp/server-4.2.asc" >> /etc/yum.repos.d/mongodb.repo;

    yum install -y mongodb-org
    systemctl unmask mongodb
}
#!/bin/bash

# Install a httpd

function mysql_install() 
{
    set -e
    local appName=mysql

    local FORCE=0
    local IS_DEFAULT=0
    local version=$MYSQL_DEFAULT_VERSION

    local _parameters=
    read_application_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi

	
	cd /tmp/releases

    case `plateform` in
        redhat)
			local MYSQL_RPM="mysql57-community-release-el7-9.noarch.rpm"

			# fixed Public key for mysql-community-xxx.rpm is not installed https://segmentfault.com/a/1190000041433962
			rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022

			if [[ $version =~ ^8.*$ ]];
			then 
				MYSQL_RPM=mysql80-community-release-el$OS_VERSION-1.noarch.rpm
			fi

			# if [[ ! -f /etc/yum.repos.d/pgdg-redhat-all.repo ]]; then
			if [[ ! -f /tmp/releases/$MYSQL_RPM ]]; then
				curl -fSL https://dev.mysql.com/get/$MYSQL_RPM -o /tmp/releases/$MYSQL_RPM
				# wget https://dev.mysql.com/get/$MYSQL_RPM
			fi
			execute rpm -ivh "/tmp/releases/${MYSQL_RPM}"
            ;;
        debian)
			local MYSQL_DEB="mysql-apt-config_0.8.16-1_all.deb"
			if [[ $version =~ ^8.*$ ]];
			then 
				# wget https://dev.mysql.com/get/mysql-apt-config_0.8.16-1_all.deb
				if [[ ! -f /tmp/releases/$MYSQL_DEB ]]; then
					curl -fSL https://dev.mysql.com/get/$MYSQL_DEB -o /tmp/releases/$MYSQL_DEB
				fi
				
				apt-get install -y /tmp/releases/$MYSQL_DEB
			fi
        ;;
    esac
	
	install -y mysql-server
	
    if [[ -n "$ADMIN_USER" && $(getent passwd $ADMIN_USER)  ]]; then sudo usermod -aG mysql $ADMIN_USER; fi

    case `plateform` in 
        redhat)
			/usr/sbin/mysqld --initialize-insecure  --user=mysql
			/usr/bin/mysqld_pre_systemd
			if [[ $OS_VERSION =~ 6 ]]; then execute chkconfig --add mysqld ; else execute systemctl enable mysqld; fi
            ;;
        debian)
			execute systemctl enable mysql;
        ;;
    esac
}


mysql_setup(){
    local version=11
    local data=

    local _parameters=
    read_application_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi

	# mysqld --initialize-insecure --user=mysql;
	# get temporary password
	# grep 'temporary password' /var/log/mysqld.log
	# How to remove root password
	# mysqladmin -u root -p"temporary password" password ''
	echo 'validate_password = OFF' >> /etc/my.cnf

	# systemctl enable mysqld --now
	mysql_service restart
	local log_file=/var/log/mysqld.log

	if [ -f $log_file ] ; then
		tmp_pwd_line=$(grep 'temporary password' $log_file)
		tmp_pwd=${tmp_pwd_line##*root@localhost\:}
		tmp_pwd=${tmp_pwd#"${tmp_pwd%%[![:space:]]*}"}
		if [ -n "$tmp_pwd" ] ; then
			echo "Trying to remove root@localhost password: $tmp_pwd"
			mysqladmin -u root -p${tmp_pwd} password '' && \
			sed -i -e "s/temporary password/temporary_password/" $log_file
		fi
	fi
 	
	# mysql_createuser >> /log.txt
	# MYSQL_DATABASES=${MYSQL_DATABASES:-$DATABASES}
	# for database in $MYSQL_DATABASES; do
	# 	echo "create database: cpm mysql:createdb --db-name=$database --db-user=$database --db-password=$database.123 "
	# 	mysql_createdb --db-name=$database --db-user=$database --db-password=$database.123 >> /log.txt
	# done

	# local install_file=mysql-install-database.sql
	# if [[ -f $APP_DIR/dist/$install_file && -n $DB_NAME ]]; then
	# 	echo "running $APP_DIR/dist/$install_file"
	# 	sudo mysql $DB_NAME < $APP_DIR/dist/$install_file  >> /log.txt
	# fi

	# for directory in $APPS_DIR/ ; do
	# 	if [[ -f $directory/dist/$install_file && -n $DB_NAME ]]; then
	# 		echo "running $directory/dist/$install_file"
	# 		sudo mysql $directory < $directory/dist/$install_file  >> /log.txt
	# 	fi
	# done
}


mysql_createdb() {
	local FORCE=0
	local DB_HOST='%'
    local _parameters=
    read_application_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi
	
    if [[ -z "$DB_NAME" ]]; then
        echo "===>> ERROR: --db-name={DB_NAME} required"
        exit 0;
    fi
	
	if [ "$FORCE" == "1" ]; then sudo mysql --execute="DROP SCHEMA IF EXISTS $DB_NAME;" ; fi
	
	sudo mysql --execute="CREATE SCHEMA IF NOT EXISTS $DB_NAME DEFAULT CHARACTER SET utf8;"

	if [[ -n "$DB_USER" ]] ; then
		EXISTS_DB_USER="$(mysql_existuser $DB_USER ${DB_HOST:-localhost})"
		if [ "$EXISTS_DB_USER" = 0 ]; then
			sudo mysql --execute="CREATE USER '$DB_USER'@'${DB_HOST:-localhost}';";
			echo "CREATE USER '$DB_USER'@'${DB_HOST:-localhost}';"
		fi
		if [[ -n "$DB_PASSWORD" ]]; then
			# echo "ALTER USER '$DB_USER'@'${DB_HOST:-localhost}' IDENTIFIED BY '$DB_PASSWORD'"
			sudo mysql --execute="ALTER USER '$DB_USER'@'${DB_HOST:-localhost}' IDENTIFIED BY '$DB_PASSWORD'; FLUSH PRIVILEGES;";
			echo "SET PASSWORD '$DB_USER'@'${DB_HOST:-localhost}'"
		fi

		sudo mysql --execute="GRANT ALL PRIVILEGES ON $DB_NAME.* TO '$DB_USER'@'${DB_HOST:-localhost}'; FLUSH PRIVILEGES;";
	fi
}

mysql_existuser() {
	local username=$1
	local hostname=${2:-localhost}
	# local DB_HOST='%'
	# echo "sudo mysql -sse \"SELECT EXISTS(SELECT 1 FROM mysql.user WHERE user = '$DB_USER@${DB_HOST:-localhost}')\""
	EXISTS_DB_USER="$(sudo mysql -sse "SELECT EXISTS(SELECT 1 FROM mysql.user WHERE user = '$username' AND host = '${hostname:-localhost}');")"
	echo $EXISTS_DB_USER;
}

mysql_createuser() {
    local _parameters=
	local DB_HOST='%'
    read_application_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi

	if [[ -n "$DB_USER" ]] ; then
		EXISTS_DB_USER="$(mysql_existuser $DB_USER ${DB_HOST:-localhost})"
		if [ "$EXISTS_DB_USER" = 0 ]; then
			sudo mysql --execute="CREATE USER '$DB_USER'@'${DB_HOST:-localhost}';";
			echo "CREATE USER '$DB_USER'@'${DB_HOST:-localhost}';"
		fi

		# Change user password if user already exist
		if [[ -n "$DB_PASSWORD" ]]; then
			# echo "ALTER USER '$DB_USER'@'${DB_HOST:-localhost}' IDENTIFIED BY '$DB_PASSWORD'"
			sudo mysql --execute="ALTER USER '$DB_USER'@'${DB_HOST:-localhost}' IDENTIFIED BY '$DB_PASSWORD'; FLUSH PRIVILEGES;";
			echo "SET PASSWORD '$DB_USER'@'${DB_HOST:-localhost}'"
		fi

		# Create database
		if [[ -n "$DB_NAME" ]]; then
			sudo mysql --execute="CREATE SCHEMA IF NOT EXISTS $DB_NAME DEFAULT CHARACTER SET utf8;";
			sudo mysql --execute="GRANT ALL PRIVILEGES ON $DB_NAME.* TO '$DB_USER'@'${DB_HOST:-localhost}'; FLUSH PRIVILEGES;";
			echo "CREATE DATABASE $DB_NAME and grant all privileges to '$DB_USER'@'${DB_HOST:-localhost}'"
		fi
	fi
}

mysql_update_password() {
    local _parameters=
    read_application_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi

	if [[ -n "$DB_USER" ]] ; then
		EXISTS_DB_USER="$(mysql_existuser $DB_USER ${DB_HOST:-localhost})"
		if [ "$EXISTS_DB_USER" = 0 ]; then
			echo "ERROR:  user '$DB_USER'@'${DB_HOST:-localhost}' not found !";
			exit 1;
		fi

		# Change user password 
		if [[ -n "$DB_PASSWORD" ]]; then
			sudo mysql --execute="ALTER USER '$DB_USER'@'${DB_HOST:-localhost}' IDENTIFIED BY '$DB_PASSWORD'; FLUSH PRIVILEGES;";
		fi
	fi
}



#!/bin/bash


nextcloud_install() {
    _VERSION=${1:-"latest"}
    _DESTINATION=${2:-"/var/www"}
    # Download
    cd $_DESTINATION && \
    https://download.nextcloud.com/server/releases/nextcloud-23.0.7.tar.bz2
    _VERSION=23.0.7
    curl -fSL https://download.nextcloud.com/server/releases/nextcloud-$_VERSION.tar.bz2  -o nextcloud-$_VERSION.tar.bz2 && \
    tar -jxf nextcloud-$_VERSION.tar.bz2  # Extract files

    #  Create nextcloud data folder
    mkdir $_DESTINATION/nextcloud/data
    chown -R apache:apache $_DESTINATION/nextcloud/
}
#!/bin/bash


nginx_install() {
    install -y nginx
    
    if [[ -n "$ADMIN_USER" && $(getent passwd $ADMIN_USER)  ]]; then sudo usermod -aG nginx $ADMIN_USER; fi
}

#!/bin/bash


nodejs_install() {
    local appName="nodejs npm yarn"
    
    case `plateform` in 
        redhat)
            if [ ! -f /etc/yum.repos.d/yarn.repo ]
            then
                curl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo
                rpm --import https://dl.yarnpkg.com/rpm/pubkey.gpg
            fi
            install -y nodejs npm yarn
            ;;
        debian)
            install -y nodejs npm node-gyp nodejs-dev libssl1.0-dev yarn
        ;;
    esac

    npm install -g n && n lts

    # echo "---> npm install -g npm@latest"
    # # npm install -g npm@latest

    # echo "---> npm install --global 
    # npm install --global @angular/cli@latest
    
    echo ">> Installed applications '$appName' "
}

#!/bin/bash

# Install a php

# https://medium.com/@daniel.bui/multiple-php-version-with-apache-on-centos-7-17078c66692c

# Reads arguments options
# function parse_php_arguments()
# {
#   # if [ $# -ne 0 ]; then
#     local TEMP=`getopt -o p:: --long data::,version::,port::,config-file:: -n "$0" -- "$@"`
    
# 	eval set -- "$TEMP"
#     # extract options and their arguments into variables.
#     while true ; do
#         case "$1" in
#             # --install-dir) INSTALL_DIR=${2:-"$INSTALL_DIR"} ; shift 2 ;;
#             # --data) data=${2%"/"} ; shift 2 ;;
#             --file-config) config_file=${2:-"$config_file"}; shift 2 ;;
#             --version) version=${2:-"$version"}; shift 2 ;;
#             --) shift ; break ;;
#             *) echo "Internal error! $1" ; exit 1 ;;
#         esac
#     done

#     shift $(expr $OPTIND - 1 )
#     _parameters=$@
    
#   # fi
# }

function php_remove()
{
    set -e
    local version=
    local _parameters=
    read_application_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi
	
	local php_exts="fpm mysql pgsql odbc gd imap interbase intl mbstring ldap xml xmlrpc soap pear opcache json  "
	local pecl_exts="geoip memcache memcached apcu igbinary mongodb xdebug redis imagick zip   "
	local cmd=
	version=${version/./}
	if [ "1" == "$IS_DEFAULT" ]; then
		version=
	fi

	if has_command php$version ; then 
		for ext in $php_exts ; do  cmd+=" php$version-$ext"; done
		for ext in $pecl_exts ; do  cmd+=" php$version-pecl-$ext"; done
		remove -y php$version $cmd
	fi
}

function php_install()
{
	php_remove $@
    set -e
    local version=
    local _parameters=
    read_application_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi

	local php_exts="fpm mysql pgsql odbc gd imap interbase intl mbstring ldap xml xmlrpc soap pear opcache json  "
	local pecl_exts="geoip memcache memcached apcu igbinary mongodb xdebug redis imagick zip   "

	local cmd=
	# for ext in $php_exts ; do  phps+=" php$pversion-$ext"; done
	# for ext in $pecl_exts ; do  phps+=" php$pversion-pecl-$ext"; done

    case `plateform` in 
        redhat)
			if [ "1" == "$IS_DEFAULT" ] ; then
				PHP_DEFAULT_VERSION=${version:-$PHP_DEFAULT_VERSION}
				version=
				echo "---> Set default php version '$PHP_DEFAULT_VERSION'"
				case $OS_VERSION in 
					6|7)
						execute yum-config-manager --enable remi-php${PHP_DEFAULT_VERSION/./};
					;;
					*)
						execute yum module install -y php:remi-${PHP_DEFAULT_VERSION};
					;;
				esac
			fi

			# if [ -z $version ]; then 
			# 	echo "PHP_DEFAULT_VERSION=$PHP_DEFAULT_VERSION"
			# 	case $OS_VERSION in 
			# 		8)
			# 			if [ "$EUID" -ne 0 ]; then sudo yum module install -y php:remi-$PHP_DEFAULT_VERSION; else yum module install -y php:remi-$PHP_DEFAULT_VERSION; fi
			# 			# php_exts="fpm imap mysqlnd pgsql odbc gd  interbase intl mbstring ldap xml xmlrpc soap pear opcache json  ";
			# 			# pecl_exts="geoip memcache memcached apcu igbinary mongodb xdebug redis imagick zip"
			# 		;;
			# 		6|7)
			# 			if [ "$EUID" -ne 0 ]; then sudo yum-config-manager --enable remi-php${PHP_DEFAULT_VERSION/./}; else yum-config-manager --enable remi-php${PHP_DEFAULT_VERSION/./}; fi
			# 			# php_exts="fpm imap mysqlnd pgsql odbc gd  interbase intl mbstring ldap xml xmlrpc soap pear opcache json  ";
			# 			# pecl_exts="geoip memcache memcached apcu igbinary mongodb xdebug redis imagick zip"
			# 		;;
			# 	esac
			# fi 

			version=${version/./}
			# local pversion=
			# if [ -n "$version" ]; then pversion=${version}-php;	fi
			#mcrypt mssql process
            ;;
        debian)
			# https://www.digitalocean.com/community/tutorials/how-to-run-multiple-php-versions-on-one-server-using-apache-and-php-fpm-on-ubuntu-18-04
			sudo wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg
			echo "deb https://packages.sury.org/php/ $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/php.list
			sudo apt-get install software-properties-common lsb-release apt-transport-https ca-certificates -y 
			sudo apt-get update -y
			# sudo add-apt-repository ppa:ondrej/php
			# for ext in $php_exts ; do  cmd+=" php$version-$ext"; done
			# for ext in $pecl_exts ; do  cmd+=" php$version-$ext"; done
			# install -y php$version  $cmd
			
			local php_exts="fpm cli mysql pgsql odbc gd imap interbase intl mbstring ldap xml xmlrpc soap pdo curl bcmath json opcache json  "
			local pecl_exts=
        ;;
    esac

	for ext in $php_exts ; do  cmd+=" php$version-$ext"; done
	for ext in $pecl_exts ; do  cmd+=" php$version-pecl-$ext"; done
	echo "Install: php$version $cmd"
	install -y php$version $cmd

	

	# version=${version/./}
	# version=${version/-php/}
	
    # local phpversion=
	# if [ -n "$version" ];
	# then 
	# 	phpversion=${version}-php
	# fi

    # sudo yum -y install php$phpversion \
	# 	php$phpversion-devel \
	# 	php$phpversion-fpm \
	# 	php$phpversion-mysql \
	# 	php$phpversion-mssql \
	# 	php$phpversion-pgsql \
	# 	php$phpversion-odbc \
	# 	php$phpversion-gd \
	# 	php$phpversion-imap \
	# 	php$phpversion- \
	# 	php$phpversion- \
	# 	php$phpversion- \
	# 	php$phpversion- \
	# 	php$phpversion- \
	# 	php$phpversion- \
	# 	php$phpversion- \
	# 	php$phpversion- \
	# 	php$phpversion- \
	# 	php$phpversion- \
	# 	php$phpversion- \
	# 	php$phpversion-pecl- \
	# 	php$phpversion-pecl- \
	# 	php$phpversion-pecl- \
	# 	php$phpversion-pecl- \
	# 	php$phpversion-pecl- \
	# 	php$phpversion-pecl- \
	# 	php$phpversion-pecl- \
	# 	php$phpversion-pecl- \
	# 	php$phpversion-pecl- \
	# 	php$phpversion-pecl- \
	# 	php$phpversion-pecl-
	
	# # Setting composer
    if [ ! -f /usr/local/bin/composer ]
    then 
	    curl -sS https://getcomposer.org/installer | php$version && sudo mv composer.phar /usr/local/bin/composer
    fi

	if [ -f /etc/httpd/conf.d/php$version-php.conf ]
    then 
	    sudo mv /etc/httpd/conf.d/php$version-php.conf /etc/httpd/conf.d/php$version-php.conf.bck
    fi

    local _BIN_="/bin"

    if [[ "$OS_VERSION" == "6" || "$(plateform)" == "debian" ]];
    then
        _BIN_="/usr/bin"
    fi

	sudo mkdir -p /var/www/cgi-bin
	if [ ! -f /var/www/cgi-bin/php$version.fcgi  ]
    then 
		sudo cat > /var/www/cgi-bin/php$version.fcgi << EOF 
#!/bin/bash 
exec $_BIN_/php$version-cgi
EOF
    fi
	
	sudo chmod 755 /var/www/cgi-bin/*.fcgi
}


# ## detect if a script is being sourced or not
# if [[ $_ == $0 ]] 
# then
# 	install_httpd "$@"
# fi
#!/bin/bash


# Reads arguments options
# function parse_postgresql_arguments()
# {
#   # if [ $# -ne 0 ]; then
#     local long="data::,version::,postgis-version::,postgresql-version::,port::,config-file::,db-user::,db-password::,db-name::,host::"
#     # echo "long = $long"
#     local TEMP=`getopt -o p:: --long $long -n "$0" -- "$@"`
    
# 	eval set -- "$TEMP"
#     # extract options and their arguments into variables.
#     while true ; do
#         case "$1" in
#             --data) data=${2%"/"} ; shift 2 ;;
#             --file-config) config_file=${2:-"$config_file"}; shift 2 ;;
#             --version) _version=${2:-"$_version"}; shift 2 ;;
#             --postgis-version) _postgis_version=${2}; shift 2 ;;
#             --postgis) _postgis_version=${2}; shift 2 ;;
#             --postgresql-version) _postgresql_version=${2:-$_postgresql_version}; shift 2 ;;
#             --postgresql) _postgresql_version=${2}; shift 2 ;;
#             --port) port=${2:-"$port"}; shift 2 ;;
#             --users-config) users_config=${2:-"$users_config"}; shift 2 ;;
#             --db-user) DB_USER=${2}; shift 2 ;;
#             --db-password) DB_PASSWORD=${2}; shift 2 ;;
#             --db-name) DB_NAME=${2}; shift 2 ;;
#             --host) _host=${2}; shift 2 ;;
#             # --port) port=${2:-"$port"}; shift 2 ;;
#             --) shift ; break ;;
#             *) echo "Internal error! $1" ; exit 1 ;;
#         esac
#     done

#     shift $(expr $OPTIND - 1 )
#     _parameters=$@
    
#   # fi
# }

postgresql_add_repolist() {
    case `plateform_name` in 
        debian)
            if [[ ! -f /etc/apt/sources.list.d/pgdg.list ]]; then
                cd /tmp
                wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
                echo "deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main" | sudo tee  /etc/apt/sources.list.d/pgdg.list
                sudo apt -y update
            fi
            ;;
        fedora)
            if [[ ! -f /etc/yum.repos.d/pgdg-redhat-all.repo ]]; then
                install -y https://download.postgresql.org/pub/repos/yum/reporpms/F-$OS_VERSION-x86_64/pgdg-redhat-repo-latest.noarch.rpm
            fi
            ;;
        *)
            if [[ ! -f /etc/yum.repos.d/pgdg-redhat-all.repo ]]; then
                install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-$OS_VERSION-x86_64/pgdg-redhat-repo-latest.noarch.rpm
            fi
        ;;
    esac
}


function postgis_install() 
{
    set -e
    local _postgresql_version=
    local _postgis_version=$POSTGIS_DEFAULT_VERSION
    local _parameters=
    read_application_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi

    postgresql_add_repolist
    _postgresql_version=${postgresql_version:-$_postgresql_version}
    _postgis_version=${postgis_version:-$_postgis_version}

    case `plateform` in 
        debian)
            install -y postgresql-$_postgresql_version-postgis-$_postgis_version
            ;;
        redhat)
            if [ '8' == "$OS_VERSION" ]; then 
                # https://serverfault.com/questions/1049330/error-conflicting-requests-in-centos-8-package-installation
                # sudo dnf -qy module disable postgresql
                echo ">> dnf config-manager --set-enabled powertools"
                if [ "$EUID" -eq 0 ]; then dnf config-manager --set-enabled powertools; else sudo dnf config-manager --set-enabled powertools; fi
                echo ">> install -y dnf-plugins-core gdal-devel "
                install -y dnf-plugins-core gdal-devel 
            fi
            install -y postgis${_postgis_version//./}_$_postgresql_version # postgis24_11
        ;;
    esac

}

function postgresql_install() 
{
    set -e
    local _postgresql_version=$POSTGRESQL_DEFAULT_VERSION
    local _postgis_version=
    local _parameters=
    local version=
    local data=
    local log=
    local port=5432
    read_application_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi

    postgresql_add_repolist
    
    _postgresql_version=${version:-$_postgresql_version}
    _postgis_version=${postgis_version:-$_postgis_version}
    data=${data:-"/var/lib/pgsql/$_postgresql_version/data"}
    log=${log:-"var/log/postgresql-$_postgresql_version.log"}

    # echo "PGDATA=/var/lib/pgsql/$_postgresql_version/data"
    echo "export PATH=$PATH:/usr/pgsql-${_postgresql_version}/bin" | sudo tee -a /etc/profile.d/postgresql.sh
    # source /etc/profile.d/postgresql.sh

    case `plateform` in 
        debian)
            install -y postgresql-${_postgresql_version} postgresql-client-${_postgresql_version} postgresql-$_postgresql_version-pglogical pgbouncer
            ;;
        redhat)
            if [ '8' == "$OS_VERSION" ]; then 
                # https://serverfault.com/questions/1049330/error-conflicting-requests-in-centos-8-package-installation
                echo ">> dnf -qy module disable postgresql"
                if [ "$EUID" -eq 0 ]; then
                    dnf -qy module disable postgresql; 
                else 
                    sudo dnf -qy module disable postgresql; 
                fi
            fi
            install -y postgresql$_postgresql_version  postgresql$_postgresql_version-libs postgresql$_postgresql_version-server postgresql-contrib-$_postgresql_version
            postgresql_setup --version=$_postgresql_version --data=$data --log=$log --port=$port
        ;;
    esac
    
    if [[ -n "$_postgis_version" ]]
    then 
        # echo "postgis_install --postgresql-version=$_postgresql_version --postgis-version=$_postgis_version"
        postgis_install --postgresql-version=$_postgresql_version --postgis-version=$_postgis_version
    fi
    
    if [[ -n "$ADMIN_USER" && $(getent passwd $ADMIN_USER)  ]]; then sudo usermod -aG postgres $ADMIN_USER; fi
}

postgresql_createuser(){
    local version=11
    local data=

    local _parameters=
    read_application_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi

    cd /tmp
	if [[ -n "$DB_USER" ]] ; then
		EXISTS_USER="$(sudo -u postgres psql postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname='$DB_USER'")"
		if [[ -z "$EXISTS_USER" ]]; then
			sudo -u postgres psql --command "CREATE USER $DB_USER WITH SUPERUSER ;"
		fi
		# TODO: Change user password if user already exist
		if [[ -n "$DB_PASSWORD" ]]; then
			sudo -u postgres psql --command "ALTER USER $DB_USER with PASSWORD '$DB_PASSWORD';"
		fi
	fi
}

postgresql_createdb(){
    # local version=11
    # local data=

    local _parameters=
    read_application_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi
    
    cd /tmp
    
    if [[ -z "$DB_NAME" ]]; then
        echo "===>> ERROR: --db-name={DB_NAME} required"
        exit 0;
    fi
    if [[ -z "$DB_USER" ]]; then
        echo "===>> ERROR: --db-user={DB_USER} required"
        exit 0;
    fi

	EXISTS_DB="$(sudo -u postgres psql -tAc "SELECT datname FROM pg_catalog.pg_database WHERE datname='$DB_NAME'")"
	if [[ -z "$EXISTS_DB" ]]; then
		sudo -u postgres createdb -O $DB_USER $DB_NAME
	fi
	sudo -u postgres psql $DB_NAME --command "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"
}

postgresql_setup(){
    local version=11
    local data=
    local log=
    local port=5432

    local _parameters=
    read_application_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi

    data=${data:-"/var/lib/pgsql/${version}/data"}
    log=${log:-"/var/log/postgresql-${version}.log"}

    if [[ ( ! -d $data ) || ( ! "$(ls -A $data)" ) ]]; then
        echo "Init postgresql $version"
        sudo -u postgres /usr/pgsql-${version}/bin/pg_ctl -D $data init
        # /usr/pgsql-${version}/bin/postgresql-${version}-setup initdb
    fi

    if ! grep '0.0.0.0/0' $data/pg_hba.conf ; then
        echo 'host      all     all     0.0.0.0/0 md5' >> $data/pg_hba.conf
    fi
    sed -i -e 's/ident$/md5/g' $data/pg_hba.conf

	systemctl enable postgresql-${version}

    if [[ ! -f "$log" ]]; then
        sudo touch $log
    fi
    chown postgres:postgres $log
    sudo -u postgres /usr/pgsql-${version}/bin/pg_ctl -D $data -l $log -o "-p $port" restart
    # sudo -u postgres /usr/pgsql-${version}/bin/pg_ctl -D $data -l $log  restart
	# systemctl restart postgresql-${version}

	sleep 2
	# cd /tmp

	# echo "DB_USER=$DB_USER DB_PASSWORD=$DB_PASSWORD DB_NAME=$DB_NAME" 
	# if [[ -n "$DB_USER" ]] ; then
	# 	EXISTS_USER="$(sudo -u postgres psql postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname='$DB_USER'")"
	# 	if [[ -z "$EXISTS_USER" ]]; then
	# 		sudo -u postgres psql --command "CREATE USER $DB_USER WITH SUPERUSER ;"
	# 	fi
	# 	# TODO: Change user password if user already exist
	# 	if [[ -n "$DB_PASSWORD" ]]; then
	# 		sudo -u postgres psql --command "ALTER USER $DB_USER with PASSWORD '$DB_PASSWORD';"
	# 	fi
	# fi
	# EXISTS_DB="$(sudo -u postgres psql -tAc "SELECT datname FROM pg_catalog.pg_database WHERE datname='$DB_NAME'")"
	# if [[ -z "$EXISTS_DB" ]]; then
	# 	sudo -u postgres createdb -O $DB_USER $DB_NAME
	# fi
	# sudo -u postgres psql $DB_NAME --command "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"
}


postgresql_execfile()
{
    local _parameters=
    read_application_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi

	local file=$1
    if [[ -n "$file" ]]; then
        echo "===>> ERROR: SQL's file is required as first argument"
        exit 0;
    fi

    if [[ -z "$DB_NAME" ]]; then
        echo "===>> ERROR: --db-name={DB_NAME} required"
        exit 0;
    fi

    DB_USER=${DB_USER:-'postgres'}

    if [[ -z "$DB_PASSWORD" ]]; then
        cat $file | psql "postgresql://$DB_USER@${DB_HOST:-localhost}/$DB_NAME";
    else
        cat $file | psql "postgresql://$DB_USER:$DB_PASSWORD@${DB_HOST:-localhost}/$DB_NAME"
    fi
}

#!/bin/bash

# Install prometheus
# https://www.fosslinux.com/10398/how-to-install-and-configure-prometheus-on-centos-7.htm

# # Reads arguments options
# function parse_prometheus_arguments()
# {
#   # if [ $# -ne 0 ]; then
#     local TEMP=`getopt -o p:: --long data::,version::,port::,config-file:: -n "$0" -- "$@"`
    
# 	eval set -- "$TEMP"
#     # extract options and their arguments into variables.
#     while true ; do
#         case "$1" in
#             --install-dir) INSTALL_DIR=${2:-"$INSTALL_DIR"} ; shift 2 ;;
#             --data) data=${2%"/"} ; shift 2 ;;
#             --file-config) config_file=${2:-"$config_file"}; shift 2 ;;
#             --version) version=${2:-"$version"}; shift 2 ;;
#             --port) port=${2:-"$port"}; shift 2 ;;
#             --users-config) users_config=${2:-"$users_config"}; shift 2 ;;
#             # --db-name) DB_NAME=${2:-"$DB_NAME"}; shift 2 ;;
#             # --db-user) DB_USER=${2:-"$DB_USER"}; shift 2 ;;
#             # --db-password) DB_PASSWORD=${2:-"$DB_PASSWORD"}; shift 2 ;;
#             # --db-host) DB_HOST=${2:-"$DB_HOST"}; shift 2 ;;
#             # --port) port=${2:-"$port"}; shift 2 ;;
#             --) shift ; break ;;
#             *) echo "Internal error! $1" ; exit 1 ;;
#         esac
#     done

#     shift $(expr $OPTIND - 1 )
#     _parameters=$@
    
#   # fi
# }

function prometheus_install() 
{
    set -e
    local appName=prometheus
      cd /tmp/releases
    local version=2.24.1
    local data=/var/lib/$appName
    local port=9099
    # local prometheus_config=
    # local file_config=
    # local INSTALL_DIR=/usr/share
    # echo $@
    local _parameters=
    read_application_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi

    # data=${data:-"$1"}
    # data=${data%"/"} 
    # INSTALL_DIR=${INSTALL_DIR%"/"} 

    if ! getent passwd $appName > /dev/null 2>&1; then
        sudo groupadd --system $appName
        sudo useradd --no-create-home --shell /bin/false -g $appName $appName
    fi
    
    
    sudo mkdir /etc/$appName /var/lib/$appName
    sudo chown $appName:$appName /etc/$appName /var/lib/$appName
    
    if [ ! -f /tmp/releases/prometheus-$version.tar.gz ];
    then 
      curl -fSL  https://github.com/prometheus/prometheus/releases/download/v${version}/prometheus-${version}.linux-amd64.tar.gz -o /tmp/releases/prometheus-$version.tar.gz
    fi
    cd /tmp/releases
    tar -xvzf /tmp/releases/prometheus-$version.tar.gz
    mv prometheus-$version.linux-amd64 prometheuspackage
    #
    sudo cp prometheuspackage/prometheus /usr/local/bin/
    sudo cp prometheuspackage/promtool /usr/local/bin/
    sudo chown prometheus:prometheus /usr/local/bin/prometheus
    sudo chown prometheus:prometheus /usr/local/bin/promtool
    #
    sudo cp -r prometheuspackage/consoles /etc/prometheus
    sudo cp -r prometheuspackage/console_libraries /etc/prometheus
    sudo chown -R prometheus:prometheus /etc/prometheus/consoles
    sudo chown -R prometheus:prometheus /etc/prometheus/console_libraries
    #
    # sudo vim /etc/prometheus/prometheus.yml

    cat > /etc/prometheus/prometheus.yml << EOF
global:
  scrape_interval: 10s

scrape_configs:
  - job_name: 'prometheus_master'
    scrape_interval: 5s
    static_configs:
      - targets: ['localhost:$port']
EOF
    chown prometheus:prometheus /etc/prometheus/prometheus.yml
    touch /etc/systemd/system/prometheus.service
    cat /etc/systemd/system/prometheus.service << EOF
[Unit]
Description=Prometheus
Wants=network-online.target
After=network-online.target

[Service]
#User=prometheus
Group=prometheus
Type=simple
ExecStart=/usr/local/bin/prometheus \
--config.file /etc/prometheus/prometheus.yml \
--storage.tsdb.path /var/lib/prometheus/ \
--web.listen-address 0.0.0.0:$port \
--web.console.templates=/etc/prometheus/consoles \
--web.console.libraries=/etc/prometheus/console_libraries

[Install]
WantedBy=multi-user.target
EOF

    # systemctl daemon-reload
    # systemctl enable prometheus
    # sudo systemctl unmask prometheus.service


}


#!/bin/bash

function python_install() 
{
    set -e
    local FORCE=0
    local IS_DEFAULT=0
    local version=
    # echo $@

    local _parameters=
    read_application_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi

    plateform=`plateform`

    case $plateform in 
        redhat)
            if [ "$(rpm -E %{rhel})" ==  "6" ]; then
                install -y python34 python34-libs python34-devel python34-pip;
            fi

            if [ "$(rpm -E %{rhel})" ==  "7" ]; then
                install -y python36 python36-libs python36-devel python36-pip;
                execute ln -s -f /usr/bin/pip3.6 /usr/bin/pip3;
            fi

            if [ "$(rpm -E %{rhel})" ==  "8" ]; then
                install -y python3 python3-pip;
            fi
            ;;
        debian)
            install -yqq python3-pip python3-dev
        ;;
        *)
            echo ">> Noy implemented script for plateform: $plateform"
            exit 1;
        ;;
    esac
    
    pip_install --upgrade pip;
}


#!/bin/bash

redis_install() {
    local appName=redis
    case `plateform` in 
        redhat)
            if [ ! -f /etc/yum.repos.d/remi.repo ]; then
                install -y http://rpms.remirepo.net/enterprise/remi-release-7.rpm
            fi
            sudo yum-config-manager --enable remi 
        ;;
    esac

    install -y redis
    
    if [[ -n "$ADMIN_USER" && $(getent passwd $ADMIN_USER)  ]]; then sudo usermod -aG redis $ADMIN_USER; fi
    echo ">> Installed applications '$appName' "
}

#!/bin/bash

# Install solr


function solr_install() 
{
    set -e
    local appName=solr

    local FORCE=0
    local IS_DEFAULT=0
    local version=$SORL_DEFAULT_VERSION
    local port=8983
    local data_dir=/var/lib/solr
    local INSTALL_DIR=/usr/share

    local _parameters=
    read_application_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi

    case "$version" in
        "8") version=8.11.1 ;;
        "7") version=7.7.3 ;;
        *)
        ;;
    esac


    # local name="solr"
    # local version=8.2.0
    # local data=
    # local catalina_home=/usr/share/tomcat
    # local DB_PASSWORD=
    # local DB_HOST=localhost
    # local solr_config=
    # local file_config=
    # local INSTALL_DIR=/usr/share
    # # echo $@
    # local _parameters=
    # parse_solr_arguments $@ 
    # if [ -n "$_parameters" ]; then set $_parameters; fi

    # data=${data:-"$1"}
    # data_dir=${data_dir%"/"} 
    # INSTALL_DIR=${INSTALL_DIR%"/"}

    # Install Solr
    # ARG version=7.4.0
    # ARG SOLR_PORT=8983
    # ENV SOLR_DIR=${APP_DIR}/solr

    # rm -rf solr-"$version".tgz install_solr_service.sh

    # echo 2
    if [ ! -f /tmp/releases/solr-$version.tgz ]
    then 
        curl -fSL https://archive.apache.org/dist/lucene/solr/$version/solr-$version.tgz -o /tmp/releases/solr-$version.tgz
    fi

    # 
    cd /tmp/releases
    # sudo mkdir -p ${data_dir} $INSTALL_DIR
    tar -xzf solr-"$version".tgz solr-"$version"/bin/install_solr_service.sh --strip-components=2

    ./install_solr_service.sh solr-"$version".tgz -i "${INSTALL_DIR}" -d "$data_dir" -p "${port}" 
    # if [ -n "$data_dir" ]; then 
    #     ./install_solr_service.sh solr-"$version".tgz -i "${INSTALL_DIR}" -d "$data_dir" -p "${port}" 
    # else
    #     ./install_solr_service.sh solr-"$version".tgz -i "${INSTALL_DIR}" -p "${port}" 
    # fi
      
    # echo " ./install_solr_service.sh solr-$version.tgz -i ${INSTALL_DIR} -d $data -p ${port} "
    
    if [ ! -f /tmp/releases/jts-core-1.16.1.jar ]; then 
        curl -fSL https://github.com/locationtech/jts/releases/download/jts-1.16.1/jts-core-1.16.1.jar -o /tmp/releases/jts-core-1.16.1.jar
        # wget https://github.com/locationtech/jts/releases/download/jts-1.16.1/jts-core-1.16.1.jar
    fi

    sudo cp -f /tmp/releases/jts-core-1.16.1.jar $INSTALL_DIR/solr-$version/server/solr-webapp/webapp/WEB-INF/lib/
    
    # cd $INSTALL_DIR/solr/server/solr-webapp/webapp/WEB-INF/lib && \
    # wget http://central.maven.org/maven2/org/locationtech/jts/jts-core/1.15.0/jts-core-1.15.0.jar

    # && chown :"${GROUP_ADMIN}" -R /etc/default/ && chmod g+w -R /etc/default \
    # && usermod solr -g "${GROUP_ADMIN}" \
    # && systemctl enable solr 
    sudo chown solr:solr -R "${INSTALL_DIR}/solr-$version" ${data_dir}

    # if [[ -n "$ADMIN_USER" && $(getent passwd $ADMIN_USER)  ]]; then sudo usermod -aG solr $ADMIN_USER; fi

    # if [[ -n "$GROUP_ADMIN" ]]; then
    #     sudo usermod -g $GROUP_ADMIN solr;
    # fi
    echo ">> Installed applications '$appName' "
}


# if [ ! $# -eq 0 ]; 
# then
#   install_solr $@
# fi
#!/bin/bash

# Install tomcat
FORCE=0
IS_DEFAULT=0
INSTALL_DIR=$INSTALL_DIR

# Reads arguments options
function parse_tomcat_arguments()
{
    # if [ $# -ne 0 ]; then
    local TEMP=`getopt -o p::,f --long version::,tomcat-config::,users-config::,config-file::,install-dir,force,default -n "$0" -- "$@"`
      
    eval set -- "$TEMP"
    # extract options and their arguments into variables.
    while true ; do
        case "$1" in
            -h|--help) _HELP=1 ; shift 1 ;;
            -f|--force) FORCE=1 ; shift 1 ;;
            --default) IS_DEFAULT=1 ; shift 1 ;;
            --install-dir) INSTALL_DIR=${2%"/"} ; shift 2 ;;
            --data) data=${2%"/"} ; shift 2 ;;   
            --file-config) config_file=${2:-"$config_file"}; shift 2 ;;
            --version) version=${2:-"$version"}; shift 2 ;;
            # --tomcat-config) tomcat_config=${2:-"$tomcat_config"}; shift 2 ;;
            --users-config) users_config=${2:-"$users_config"}; shift 2 ;;
            --) shift ; break ;;
            *) echo "Internal error! $1" ; exit 1 ;;
        esac
    done

    shift $(expr $OPTIND - 1 )
    _parameters=$@
    
  # fi
}

function tomcat_install() 
{
	set -e
    local appName=tomcat
	local users_config=
	local file_config=
	# local INSTALL_DIR=$INSTALL_DIR
	local version=$TOMCAT_DEFAULT_VERSION
    # echo $@
    local _parameters=
    parse_tomcat_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi
    # data=${data:-"$1"}
    # data=${data:-"."}
    # data=${data%"/"} 

	if [[ -n "$file_config" && ! -f $file_config ]]
	then
    echo "File not found $file_config" 
    exit 1
	fi

	if [[ -n "$users_config" && ! -f $users_config ]]
	then
    echo "File not found $users_config" 
    exit 1
	fi

    # https://computingforgeeks.com/install-apache-tomcat-9-on-linux-rhel-centos/
    if ! getent passwd tomcat > /dev/null 2>&1; then
        sudo groupadd --system tomcat
        sudo useradd -d $INSTALL_DIR/tomcat -r -s /bin/false -g tomcat tomcat
    fi
    
    
    case "$version" in
        "7") version=7.0.90;;
        "8") version=8.5.76;;
        "9") version=9.0.59;;
        "10") version=10.0.17;;
        *)
        ;;
    esac

    if [ "1" == "$FORCE" ]
    then 
        sudo rm -rf $INSTALL_DIR/tomcat-$version
    fi

    if [ -d $INSTALL_DIR/tomcat-$version ]
    then 
        echo "Tomcat $version already installed"
        exit 0
    fi

    cd /tmp/releases
    local major=`echo $version | cut -d. -f1`
    if [ ! -f apache-tomcat-${version}.tar.gz ]
    then
        curl -fSL https://archive.apache.org/dist/tomcat/tomcat-$major/v${version}/bin/apache-tomcat-${version}.tar.gz -o apache-tomcat-${version}.tar.gz
        # wget https://archive.apache.org/dist/tomcat/tomcat-$major/v${version}/bin/apache-tomcat-${version}.tar.gz
    fi

    sudo tar xf apache-tomcat-${version}.tar.gz -C $INSTALL_DIR
    sudo mv $INSTALL_DIR/apache-tomcat-$version $INSTALL_DIR/tomcat-$version
    sudo chown -R tomcat:tomcat $INSTALL_DIR/tomcat-$version
    sed -i 's|<Connector port="8080".*|<Connector port="8080" URIEncoding="UTF-8"|' $INSTALL_DIR/tomcat-$version/conf/server.xml
    if [[ -n "$ADMIN_USER" && $(getent passwd $ADMIN_USER)  ]]; then sudo usermod -aG tomcat $ADMIN_USER; fi

    if [ "1" == "$IS_DEFAULT" ]
    then
        if [ -L /etc/tomcat ]; then unlink /etc/tomcat; fi
        sudo rm -rf $INSTALL_DIR/tomcat etc/tomcat
        sudo ln -s $INSTALL_DIR/tomcat-$version $INSTALL_DIR/tomcat
        sudo ln -s $INSTALL_DIR/tomcat/conf /etc/tomcat
        if [ ! -f /etc/tomcat/tomcat.conf ]; then touch /etc/tomcat/tomcat.conf; fi
        sudo chown -R tomcat:tomcat $INSTALL_DIR/tomcat /etc/tomcat

        echo "export CATALINA_HOME=${INSTALL_DIR}/tomcat" > /etc/profile.d/tomcat.sh
        echo "CATALINA_BASE=${CATALINA_HOME}"  >> /etc/profile.d/tomcat.sh
        echo "JAVA_OPTS='$JAVA_OPTS -Djava.awt.headless=true -Dlog4j2.formatMsgNoLookups=true'"  >> /etc/profile.d/tomcat.sh
        echo "CATALINA_OPTS='-Xms512M -Xmx512M -server -XX:+UseParallelGC'"  >> /etc/profile.d/tomcat.sh
        source /etc/profile.d/tomcat.sh

        if [[ "6" != $OS_VERSION ]]; then
            sudo cat > /etc/systemd/system/tomcat.service << EOF
[Unit]
Description=Tomcat $version Server
After=syslog.target network.target

[Service]
Type=forking
User=tomcat
Group=tomcat

EnvironmentFile=/etc/tomcat/tomcat.conf
Environment=JAVA_HOME=$(readlink -f $(which java) | sed -e "s/\/bin\/java//")
Environment='JAVA_OPTS=-Djava.awt.headless=true -Dlog4j2.formatMsgNoLookups=true'
Environment=CATALINA_HOME=$INSTALL_DIR/tomcat
Environment=CATALINA_BASE=$INSTALL_DIR/tomcat
Environment=CATALINA_PID=$INSTALL_DIR/tomcat/temp/tomcat.pid
Environment='CATALINA_OPTS=-Xms512M -Xmx512M -server -XX:+UseParallelGC'

ExecStart=$INSTALL_DIR/tomcat/bin/startup.sh
ExecStop=$INSTALL_DIR/tomcat/bin/shutdown.sh 

[Install]
WantedBy=multi-user.target
EOF
            # sudo systemctl daemon-reload
        fi
    fi

    # echo "CATALINA_HOME=$INSTALL_DIR/tomcat" >> /etc/profile.d/environnments.sh
    echo ">> Installed application '$name' (version = $version) in $INSTALL_DIR/tomcat-$version"
}


# function tomcat_make_install() 
# {
#     #https://nvbach.blogspot.com/2019/04/installing-blazegraph-on-linux-debian.html
#     groupadd tomcat
#     mkdir /opt/tomcat
#     useradd -g tomcat -d /opt/tomcat -s /bin/nologin tomcat

#     cd /tmp/releases
#     wget [link to the Tomcat  7.0.90tar.gz file]
#     tar -zxvf apache-tomcat-7.0.90.tar.gz
#     mv apache-tomcat-7.0.90/* /opt/tomcat
#     chown -R tomcat:tomcat /opt/tomcat/
    
#     echo "CATALINA_HOME=/opt/tomcat" >> /etc/profile.d/environnments.sh
# }

# if [ ! $# -eq 0 ]; 
# then
#   install_tomcat $@
# fi
#!/bin/bash

# Install a wordpress


# Reads arguments options
function parse_wp_arguments()
{
  # if [ $# -ne 0 ]; then
    local TEMP=`getopt -o p:: --long data::,name::,version::,db-name::,db-user::,db-password::,db-host::,config-file:: -n "$0" -- "$@"`
    
	eval set -- "$TEMP"
    # extract options and their arguments into variables.
    while true ; do
        case "$1" in
            --data) data=${2%"/"} ; shift 2 ;;
            --version) version=${2:-"$version"}; shift 2 ;;
            --name) name=${2:-"$name"}; shift 2 ;;
            --db-name) DB_NAME=${2:-"$DB_NAME"}; shift 2 ;;
            --db-user) DB_USER=${2:-"$DB_USER"}; shift 2 ;;
            --db-password) DB_PASSWORD=${2:-"$DB_PASSWORD"}; shift 2 ;;
            --db-host) DB_HOST=${2:-"$DB_HOST"}; shift 2 ;;
            --db-port) DB_PORT=${2:-"$DB_PORT"}; shift 2 ;;
            --config-file) config_file=${2:-"$config_file"}; shift 2 ;;
            --) shift ; break ;;
            *) echo "Internal error! $1" ; exit 1 ;;
        esac
    done

    shift $(expr $OPTIND - 1 )
    _parameters=$@
    
  # fi
}

function wordpress_install() 
{
	set -e
  local name="wordpress"
	local version=
	local DB_NAME=
	local DB_USER=
	local DB_PASSWORD=
	local DB_HOST=localhost
	local DB_PORT=3306
	local data=
	local config_file=
    # echo $@
    local _parameters=
    parse_wp_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi
    data=${data:-"$1"}
    data=${data:-"."}
    data=${data%"/"} 

	local DIR_NAME=$data/$name
	
	curl -fSL http://wordpress.org/latest.zip -o latest.zip
	# wget http://wordpress.org/latest.zip
	rm -rf $DIR_NAME
	unzip -q latest.zip -d $data
	rm -f latest.zip

	if [ ! "$name" == "wordpress" ]
	then
		# echo mv $data/wordpress $data/$name
		mv -f $data/wordpress $data/$name
	fi

	# mv $_INSTALL_DIR/wordpress $_INSTALL_DIR/$_SITE_NAME
	# chown -R :$ $_INSTALL_DIR/$_SITE_NAME

	chmod -R 775 $DIR_NAME
	mkdir -p $DIR_NAME/wp-content/uploads
	# chown -R :apache $DIR_NAME/wp-content/uploads
	cp -f $DIR_NAME/wp-config-sample.php $DIR_NAME/wp-config.php

	sed -i "s/database_name_here/$DB_NAME/" $DIR_NAME/wp-config.php
	sed -i "s/username_here/$DB_USER/" $DIR_NAME/wp-config.php
	sed -i "s/password_here/$DB_PASSWORD/" $DIR_NAME/wp-config.php
	sed -i "s/localhost/$DB_HOST:$DB_PORT/" $DIR_NAME/wp-config.php
}


# if [ ! $# -eq 0 ]; 
# then
#   install_wordpress $@
# fi
#!/bin/bash


wso2_install() {
    _VERSION=${1:-"5.7.0"}
    _INSTALL_DIR=${2:-"/usr/share"}

    curl -fSL https://bintray.com/wso2/rpm/rpm -o /etc/yum.repos.d/bintray-wso2-rpm.repo
    yum install -y wso2is-$_VERSION

    _WSO2_DIR=/usr/lib64/wso2/wso2is/$_VERSION
    _WSO2_HOME=/usr/lib64/wso2

    if [[ -n "${_INSTALL_DIR}" && ! -d ${_INSTALL_DIR}/wso2 && ! -L ${_INSTALL_DIR}/wso2  ]]; then
        ln -s $_WSO2_DIR ${_INSTALL_DIR}/wso2
    fi

    if ! getent passwd wso2 > /dev/null 2>&1; then
        useradd -r -d ${_WSO2_HOME}/ wso2
    fi

    chown -R wso2:wso2 ${_WSO2_HOME}
    if [[ -n "$ADMIN_USER" && $(getent passwd $ADMIN_USER)  ]]; then sudo usermod -aG wso2 $ADMIN_USER; fi

if [[ ! -f /etc/systemd/system/wso2.service ]]; then
echo "
[Unit]
Description=WSO2 server identity provider
After=syslog.target network.target

[Service]
Type=forking
Environment=JAVA_HOME=/usr/lib/jvm/jre
Environment=CARBON_HOME=${_WSO2_DIR}
PermissionsStartOnly=true
PIDFile=${_WSO2_DIR}/wso2carbon.pid

ExecStart=${_WSO2_DIR}/bin/wso2server.sh start
ExecStop=${_WSO2_DIR}/bin/wso2server.sh stop

TimeoutStartSec=30s
Restart=on-failure
RestartSec=10s
RemainAfterExit=yes

User=wso2
[Install]
WantedBy=multi-user.target
" > /etc/systemd/system/wso2.service
fi
}


# Reads arguments options
function read_arguments()
{
    local TEMP=`getopt -o p::,f::,h,v,${SHORT:-'s'} --long ${lONG:-'long'},help,debug,verbose,force,default,name::,version::,filename::,file::,path::,password::,user::,email::,host::,port:: -n "$0" -- "$@"`

	eval set -- "$TEMP"
    # extract options and their arguments into variables.
    while true ; do
        case "$1" in
            -h|--help) HELP=1 ; shift 1 ;;
            --debug) DEBUG=1 ; shift 1 ;;
            --verbose) VERBOSE=1 ; shift 1 ;;
            --force) FORCE=1 ; shift 1 ;;
            --default) IS_DEFAULT=1 ; shift 1 ;;
            --superuser) IS_SUPERUSER=1 ; shift 1 ;;
            --name) name=${2}; names+="${2} ";shift 2 ;;
            --user) user=${2}; users+="${2} "; shift 2 ;;
            -f|--filename) filename=${2}; shift 2 ;;
            --file) file=${2}; shift 2 ;;
            -p|--path) path=${2%"/"} ; shift 2 ;;
            --data) data=${2%"/"} ; shift 2 ;;
            --version) version=${2}; shift 2 ;;
            --install-dir) install_dir=${2%"/"}; shift 2 ;;
            --home-dir) home_dir=${2%"/"} ; shift 2 ;;
            --file-config) config_file=${2}; shift 2 ;;
            --catalina-home) catalina_home=${2}; shift 2 ;;
            # --users-config) users_config=${2:-"$users_config"}; shift 2 ;;
            --offset) offset=${2:-"$port_offset"}; shift 2 ;;
            --port) port=${2}; shift 2 ;;
            --host) host=${2}; shift 2 ;;
            --password) password=${2}; shift 2 ;;
            --db-name) db_name=${2}; shift 2 ;;
            --db-user) db_user=${2}; shift 2 ;;
            --db-password) dp_password=${2}; shift 2 ;;
            --db-host) db_host=${2}; shift 2 ;;
            --db-port) db_port=${2}; shift 2 ;;
            --realm) realm=${2}; shift 2 ;;
            --email) email=${2}; shift 2 ;;
            --url) url=${2//\//\/\//}; shift 2 ;;
            --client) client=${2}; shift 2 ;;
            --audience) audience=${2}; shift 2 ;;
            --secret) secret=${2}; shift 2 ;;
            --theme) theme=${2}; shift 2 ;;
            --) shift ; break ;;
            *) echo "Internal error! $1" ; exit 1 ;;
        esac
    done

    shift $(expr $OPTIND - 1 )
    _parameters=$@
    
  # fi
}
#!/bin/bash
#

is_git_url()
{
    http_regex='(https?)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]'
    ssh_regex='[-A-Za-z0-9_@/.]+:[-A-Za-z0-9\+&@#/%?=~_|!:,.;]'
    path_regex='^/|(/[a-zA-Z0-9_-]+)+$'
    string=$1
    if [[ $string =~ $http_regex ]]
    then 
        true
    elif  [[ $string =~ $ssh_regex ]]
    then
        true
    elif  [[ $string =~ $path_regex ]]
    then
        true
    else
        false
    fi
}

# Reads arguments options
parse_git_arguments()
{
  # if [ $# -ne 0 ]; then
    TEMP=`getopt -o b::,r:: --long branch::,tag::,workspace-dir::,framework::,repo_url::,config-dir::,cache-dir::,logs-dir::,name::,repo::,team::,composer-update,workspace -n "$0" -- "$@"`
    eval set -- "$TEMP"
    # extract options and their arguments into variables.
    while true ; do
        case "$1" in
            # -e|--env) _env=${2:-"$_env"} ; shift 2 ;;
            # -p|--path) _path=${2%"/"} ; shift 2 ;;
            # -u|--user) _user=$2 ; shift 2 ;;
            -b|--branch) _branch=${2:-"$_branch"}; shift 2 ;;
            # --framework) _framework=${2:-"$_framework"}; shift 2 ;;
            # --name) _name+=" ${2:-"$_name"}"; shift 2 ;;
            -r|--repo) _repo+=" ${2:-"$_repo"}"; shift 2 ;;
            # --repo_url) _repo_url=$2; shift 2 ;;
            # --config-dir) _config_dir=$2; shift 2 ;;
            # --cache-dir) _cache_dir=$2; shift 2 ;;
            # --logs-dir) _logs_dir=$2; shift 2 ;;
            # --team) _team=${2:-"$_team"}; shift 2 ;;
            --composer-update) _composer=1; shift 1 ;;
            # --workspace) _is_workspace=1; shift 1 ;;
            --) shift ; break ;;
            *) echo "Internal error! $1" ; exit 1 ;;
        esac
    done

    shift $(expr $OPTIND - 1 )
    _parameters=$@

  # fi
}

# git_branch() {
#     git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
# }

##
## Retrieve repository name from git url
git_repo_name()
{
  set -e
  if [ $# -ne 1 ]; then
      echo "Invalid arguments! Usage: $0 git_repo_name  [repo_url]"
      exit 1
  fi
  
  local __repo=${1##*/}
  echo "${__repo%%.*}"
}


# Clone git repository
# usage: 
# cpm git:clone git@github.com:csimeu/cpm.git /path/to/save --branch=v1.0 --composer-update
# cpm git:clone csimeu/cpm /path/to/save --branch=v1.0 --composer-update --domain=github 
# cpm git:clone --repo=csimeu/cpm -d /path/to/save
# cpm git:clone --repo=csimeu/cpm --repo=csimeu/cpm --domain=github 
git_clone()
{
    set -e
    local _params=
    local _branch=
    local _composer=
    # local _is_workspace=0
    # local _team=
    local _path=
    # local _repo=
    # local _workspace_dir=

    parse_git_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi
    
    local repo=$1
    if [[ $repo =~ ^--(.*)$ ]]; then repo=; fi
    if [[ -n "$_repo" ]]; then
        repo=$_repo
    else
        shift 1
    fi
 
    local _pathdest=$1
    if [[ $_pathdest =~ ^--(.*)$ ]]; then _pathdest=; fi
    # if [ -n "$_path" ]; then
    #     _pathdest=$_path
    # fi

    # if [[ -z "$repo" && -n "$_team" ]]; then
    #     repo=${REPOS_LIST[$_team]}
    # fi
    
    if [ -z "$repo" ]; then
        echo "Invalid arguments! Usage: $0 [repo] <pathname> <--branch=v1.0>"
        exit 1
    fi
    
    _branch=${_branch:-'master'}
    # if [ -n "$_branch" ]; then _params+="--branch=$_branch "; fi
    if [ -n "$_env" ]; then _params+="--env=$_env "; fi
    # if [ -n "$_workspace_dir" ]; then _params+="--workspace-dir=$_workspace_dir "; fi
    if [[ $_composer == 1 ]] ; then _params+="--composer-update "; fi
    # if [[ $_is_workspace == 1 ]] ; then _params+="--workspace "; fi
    
    # local _workspace_dir=
    # if [[ -n "$_pathdest" ]]; then
    #     mkdir -p $_pathdest
    # fi

    for repository in $repo
    do
        if ! is_git_url $repository
        then
            repository=$(gitlab_sshUrl $_team $repository)
        fi
        
        # local _pathname=${_pathdest:-"."}/$(git_repo_name $repository)
        echo 
        echo "git clone $repository -b $_branch $_pathdest"
        echo "########################################"
        
        git clone $repository -b $_branch $_pathdest
        local _pathname=${_pathdest}
        if [[ -n "$_pathdest" ]]; then
            _pathname=./$(git_repo_name $repository)
        fi
        
        if [ -f $_pathname/.env ]; then
          localenv --file=$_pathname/.env
        fi

        if [[ $_composer == 1 ]] ; then  
            echo "update composer $_pathname ...";
            composer_update $_pathname $_params ;
        fi
    done
}


# Udapte a git repository branch or tag 
# usage git_update  --branch=v1.0  </path> --composer-update
git_update()
{
  set -e
  local _path=
  local _branch=
  local cmd=
  local _composer=
  local _latest=0
  local _args=$@ 
  # echo $_args
  
  local _parameters=
  parse_arguments $@ 
  set ${_parameters:-"."}

  _path=${_path:-"$1"}
  _path=${_path:-"."}

  # is greater than
  #if [ $# -gt 0 ] then 
  if [ -n "$_path" ] 
  then 
    cd ${_path}
  fi  
  # echo "path $_path"

  
  if [[ $_latest == 1 || _branch == "latest" ]] ; then  
    # echo 'Getting the most recent tag';
    _branch=$(git describe);
  fi

  local current_branch=$(git branch | grep \* | cut -d ' ' -f2);
  if [ -z "$current_branch" ]
  then
      echo failed
      exit 1
  fi

  _branch=${_branch:-"$current_branch"};

  # Check if tag exists
  cmd="git tag | grep -w $_branch"
  if eval $cmd ; 
  then  
    echo 'tag exists';
    git tag -d "$_branch" ;
    cmd="git branch | grep -w $_branch"
    if eval $cmd ;  
    then  
      echo 'branch exist';
      git checkout "master" && git branch -D "$_branch"
    fi
  fi

  git fetch origin && git checkout "$_branch" ;

  cmd="git tag | grep -w $_branch"
  if eval $cmd ; 
  then  
    echo 'tag exists';
    git checkout -b "$_branch" ;
    
  else
    git pull origin $_branch;
  fi

  if [[ $_composer == 1 ]] ; then  
    echo 'update composer';
    composer_update $_args ;
  fi
  # composer_update $webapp_folder
}


# Checks existance of git repository 
git_exists()
{
    # set -e
    if [ $# -eq 0 ]; then
        echo "Invalid arguments! Usage: $0 git_exists [repo_url] "
        exit 1
    fi

    GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no" git ls-remote $1 -q >/dev/null 2>&1
    
    echo $?
}

#!/bin/bash
# sed -i -e 's/\r$//' scriptname.sh


# copy local env
function localenv() 
{
    set -e
    local filename='.env.local'
    local file
    read_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi

    if [ -f $filename ]; then cp -f $filename $filename.bak-$(date +%Y-%m-%d); fi
    > $filename

    if [[ -n $file ]]; then
        # take copy of file and replace vars found value 
        if [[ ! -f $file && ! -f $file ]]; then
            echo "No such file: $file"
            exit 1
        fi
        cp -f $file $filename
        for env in `env`; do
            varName=${env%=*}
            varValue=${env##*=}

            if is_alphanum $varName; then
                # echo "${varName}=\"$varValue\""
                sed -i -e "s|^$varName=.*$|${varName}=\"${varValue//|/\\|}\"|g" $filename
                sed -i -e "s|_${varName}_|${varValue//|/\\|}|g" $filename
            fi
        done
        sed -i -e 's/\r$//' $filename
        echo  ">> Cloned file '$file' in '$filename' with locals environments variables"
        exit 0
    fi

    # echo 'go'
	for env in `env`; do
		varName=${env%=*}
		varValue=${env##*=}
        if [[ " $@ " == *" $varName "* ]]; then
            echo "${varName}=\"$varValue\"" >> $filename
        fi
	done
    
    echo ">> create/updated file '$filename' with locals environments variables"
}

#!/bin/bash

function proxy_usage()
{
    echo "Usage:"
    echo "    ${cmd//_/:} [command] "
    echo ""
    echo "Commands:"
    echo "  config                 Sets proxy configuration"
    echo "Arguments:"
    echo "  --                 Username"
    echo ""
    echo "Options:"
    echo "  -h, --help              Display this help message"
    echo "      --uid               User ID"
    echo "      --gid               User's group ID"
    echo "      --home              User's home "
    echo "      --password          User's password"
    echo "      --group            Sets groups to user"
    echo "  -f, --update            Update user if already exist"
    echo ""
    echo "Help:"
    echo "  The ${cmd//_/:} Add or update user"
    echo ""
    echo "  $0 ${cmd//_/:} centos"
    echo "  $0 ${cmd//_/:} centos --uid=2000 --gid=2000 --password=pwd123 --group=wheel"
    echo ""
}

# Reads arguments options
function parse_proxy_arguments()
{
  # if [ $# -ne 0 ]; then
    local TEMP=`getopt -o p:: --long http::,https::,no-proxy:: -n "$0" -- "$@"`
    
	eval set -- "$TEMP"
    # extract options and their arguments into variables.
    while true ; do
        case "$1" in
            --http) http="${2//\//\/\//}" ; shift 2 ;;
            --https) https="${2//\//\/\//}" ; shift 2 ;;
            --no-proxy) noproxy+="${2} "; shift 2 ;;
            --) shift ; break ;;
            *) echo "Internal error! $1" ; exit 1 ;;
        esac
    done

    shift $(expr $OPTIND - 1 )
    _parameters=$@
}


# 
function proxy_set_config() 
{
    set -e
    local help=0
    local http=
    local https=
    local noproxy=

    local _parameters=
    parse_proxy_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi

    local proxy=${http:-"$https"}
    proxy=${proxy:-"$1"}
    https=${https:-"$http"}

    if [ -z "$proxy" ]; then
        exit 0
    fi

    export http_proxy=$http
    export https_proxy=$https
    export no_proxy=$noproxy

    proxy_load_config
}

# 
function proxy_load_config() 
{
    set -e

    case `plateform` in 
        debian)
            sudo rm -f /etc/apt/apt.conf.d/proxy.conf
            sudo touch /etc/apt/apt.conf.d/proxy.conf
            if [ -n "$http_proxy" ] ; then echo  "Acquire::http::Proxy \"$http_proxy/\";" | sudo tee -a /etc/apt/apt.conf.d/proxy.conf > /dev/null; fi
            if [ -n "$https_proxy" ] ; then echo  "Acquire::https::Proxy \"$https_proxy/\";" | sudo tee -a /etc/apt/apt.conf.d/proxy.conf > /dev/null; fi
            ;;
        redhat)
            local proxy=${https_proxy:-"$http_proxy"}
            if [[ -n "$proxy" ]]; then
                sudo sed -i -e "/^proxy=.*/d" /etc/yum.conf;
                echo "proxy=$proxy" | sudo tee -a /etc/yum.conf;
            fi
        ;;
    esac

    if [ -n "$http_proxy" ] ;
    then 
        ## check if command exist before
        # https://stackoverflow.com/questions/7522712/how-can-i-check-if-a-command-exists-in-a-shell-script/39983421
        # npm
        if _loc="$(type -p npm)" && [[ -n $_loc ]]; then sudo npm config -g set proxy $http_proxy; fi
        # yarn
        if _loc="$(type -p yarn)" && [[ -n $_loc ]]; then sudo yarn config -g set proxy $http_proxy; fi
        # git
        if _loc="$(type -p git)" && [[ -n $_loc ]]; then sudo git config --global http.proxy $http_proxy; fi
        
    fi

    if [ -n "$https_proxy" ] ;
    then 
        # npm
        if _loc="$(type -p npm)" && [[ -n $_loc ]]; then sudo npm config -g set https-proxy $https_proxy; fi
        # yarn
        if _loc="$(type -p yarn)" && [[ -n $_loc ]]; then sudo yarn config -g set https-proxy $https_proxy; fi
        # git
        if _loc="$(type -p git)" && [[ -n $_loc ]]; then sudo git config --global https.proxy $http_proxy; fi
        
    fi


}

proxy_unset() 
{
    set -e
    unset http_proxy
    unset https_proxy
    unset no_proxy

    case `plateform` in 
        debian)
            sudo rm /etc/apt/apt.conf.d/proxy.conf
            ;;
        redhat)
            sed -i -e "/^proxy=.*/d" /etc/yum.conf;
        ;;
    esac
    
    # npm
    if _loc="$(type -p npm)" && [[ -n $_loc ]]; then 
        sudo npm config -g rm proxy; 
        sudo npm config -g rm https-proxy; 
    fi
    # yarn
    #yarm_unset_proxy
    # 
    if _loc="$(type -p git)" && [[ -n $_loc ]]; then 
        sudo git config --global --unset https.proxy
        sudo git config --global --unset http.proxy
    fi
        
}

yum_set_proxy() 
{
    case `plateform` in 
        redhat)
            local proxy=${1:-$https_proxy}
            proxy=${proxy:-$http_proxy}
            if [[ -n "$proxy" ]]; then
                sudo sed -i -e "/^proxy=.*/d" /etc/yum.conf;
                echo "proxy=$proxy" | sudo tee -a /etc/yum.conf;
            fi
        ;;
    esac
}
yum_unset_proxy() 
{
    case `plateform` in 
        redhat)
            sudo sed -i -e "/^proxy=.*/d" /etc/yum.conf;
        ;;
    esac
}

yarm_set_proxy() 
{ 
    local proxy=${1:-$https_proxy}
    proxy=${proxy:-$http_proxy}
    if _loc="$(type -p yarn)" && [[ -n $_loc && -n $proxy ]]; then sudo yarn config -g set proxy $http_proxy; fi
}
yarm_unset_proxy() 
{
    # yarn
    if _loc="$(type -p yarn)" && [[ -n $_loc ]]; then 
        sudo yarn config delete proxy -g; 
        sudo yarn config delete https-proxy -g; 
    fi
}

#!/bin/bash

# Install solr


# # Reads arguments options
# function parse_python_arguments()
# {
#   # if [ $# -ne 0 ]; then
#     local TEMP=`getopt -o p:: --long data::,version::,port::,config-file:: -n "$0" -- "$@"`
    
# 	eval set -- "$TEMP"
#     # extract options and their arguments into variables.
#     while true ; do
#         case "$1" in
#             --install-dir) INSTALL_DIR=${2:-"$INSTALL_DIR"} ; shift 2 ;;
#             --data) data=${2%"/"} ; shift 2 ;;
#             --file-config) config_file=${2:-"$config_file"}; shift 2 ;;
#             --version) version=${2:-"$version"}; shift 2 ;;
#             --port) port=${2:-"$port"}; shift 2 ;;
#             --users-config) users_config=${2:-"$users_config"}; shift 2 ;;
#             # --db-name) DB_NAME=${2:-"$DB_NAME"}; shift 2 ;;
#             # --db-user) DB_USER=${2:-"$DB_USER"}; shift 2 ;;
#             # --db-password) DB_PASSWORD=${2:-"$DB_PASSWORD"}; shift 2 ;;
#             # --db-host) DB_HOST=${2:-"$DB_HOST"}; shift 2 ;;
#             # --port) port=${2:-"$port"}; shift 2 ;;
#             --) shift ; break ;;
#             *) echo "Internal error! $1" ; exit 1 ;;
#         esac
#     done

#     shift $(expr $OPTIND - 1 )
#     _parameters=$@
    
#   # fi
# }

function python_install_requirements() 
{
    set -e
    requirements=${1:-"requirements.txt"}
    local _USE_PROXY
    if [[ -n "$http_proxy" ]]; then
        _USE_PROXY="--proxy $http_proxy";
    fi

    if [ -f $requirements ]; then
        pip3 install ${PIP_USE_PROXY} $requirements
    fi
}


function pip_install() 
{
    set -e
    local _USE_PROXY
    if [[ -n "$http_proxy" ]]; then
        _USE_PROXY="--proxy $http_proxy";
    fi

    pip3 install ${PIP_USE_PROXY} $@
}


# if [ ! $# -eq 0 ]; 
# then
#   install_solr $@
# fi
#!/bin/bash

# service




function mysql_service() 
{
    set -e
    # local serviceName= $1
    local cmd=$1
    
    case `plateform` in 
        redhat)
			if [[ `plateform_version` =~ 6 ]]; then 
                /etc/init.d/mysqld $cmd; 
            else 
                systemctl $cmd mysqld; 
            fi
            ;;
        debian)
			systemctl $cmd mysql;
        ;;
    esac
}


# if [ ! $# -eq 0 ]; 
# then
#   install_solr $@
# fi
#!/bin/bash

function group_usage()
{
    echo "Usage:"
    echo "    ${cmd//_/:} [options] <groupname>"
    echo ""
    echo "Arguments:"
    echo "  groupname                 Group name"
    echo ""
    echo "Options:"
    echo "  -h, --help              Display this help message"
    echo "      --gid               group ID"
    echo "      --user              Add user to groups"
    echo "  -f, --update            Update group if already exist"
    echo ""
    echo "Help:"
    echo "  The ${cmd//_/:} Add or update group"
    echo ""
    echo "  $0 ${cmd//_/:} admin"
    echo "  $0 ${cmd//_/:} admin --gid=2000 --user=userdemo --user=admindemo"
    echo ""
}

# Reads arguments options
function parse_group_arguments()
{
  # if [ $# -ne 0 ]; then
    local TEMP=`getopt -o p::,h,f --long help,force,gid::,group::,user:: -n "$0" -- "$@"`
    
	eval set -- "$TEMP"
    # extract options and their arguments into variables.
    while true ; do
        case "$1" in
            -h|--help) HELP=1 ; shift 1 ;;
            -f|--force) FORCE=1 ; shift 1 ;;
            --uid) uid="-u ${2}" ; shift 2 ;;
            --gid) gid="-g ${2}" ; shift 2 ;;
            --home) home="-d ${2}" ; shift 2 ;;
            --password) password="${2}" ; shift 2 ;;
            --group) groups+="${2} "; shift 2 ;;
            --user) users+="${2} "; shift 2 ;;
            --) shift ; break ;;
            *) echo "Internal error! $1" ; exit 1 ;;
        esac
    done

    shift $(expr $OPTIND - 1 )
    _parameters=$@
    
    if [[ "1" == $HELP ]]; 
    then
        group_usage
        exit 0
    fi
}

# 
function group_add() 
{
    set -e
    local HELP=0
    local FORCE=0
    local uid=
    local gid=
    local users=
    local groups=

    local _parameters=
    parse_group_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi

    groupname=$1


    if [[ -z "$groupname" ]]; 
    then
        echo "Commande invalide!"
        echo "    Required a groupname"
        user_usage
        exit 1
    fi

    
    if [ ! $(getent group ${groupname}) ]; then 
        sudo groupadd $gid ${groupname};
    else 
        if [[ "1" == "$FORCE" && -n "$gid" ]]; then sudo groupmod $gid ${groupname}; fi
    fi

    for user in $users
    do  
        # checks if user exit
        if  $(getent user ${user})
        then
            usermod -aG $groupname ${user}
        else
            echo "Not found user '$user'"
        fi
    done

}

# 
function group_update() 
{
    set -e
    local HELP=0
    local FORCE=0
    local uid=
    local gid=
    local users=
    local groups=

    local _parameters=
    parse_group_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi

    groupname=$1


    if [[ -z "$groupname" ]]; 
    then
        echo "Commande invalide!"
        echo "    Required a groupname"
        user_usage
        exit 1
    fi

    
    if [ ! $(getent group ${groupname}) ]; then 
        if [ "1" == "$FORCE" ]; then sudo groupadd $gid ${groupname}; else echo "Group '$groupname' not found! "; exit 1; fi
    else 
        if [ -n "$gid" ]; then sudo groupadd $gid ${groupname}; fi
    fi

    for user in $users
    do  
        # checks if user exit
        if  $(getent user ${user})
        then
            usermod -aG $groupname ${user}
        else
            echo "  >> Not found user '$user'"
        fi
    done
}
    
    #!/bin/bash

function user_usage()
{
    echo "Usage:"
    echo "    ${cmd//_/:} [options] <username>"
    echo ""
    echo "Arguments:"
    echo "  username                 Username"
    echo ""
    echo "Options:"
    echo "  -h, --help              Display this help message"
    echo "      --uid               User ID"
    echo "      --gid               User's group ID"
    echo "      --home              User's home "
    echo "      --password          User's password"
    echo "      --group             Sets groups to user"
    echo "  -f, --update            Update user if already exist"
    echo ""
    echo "Help:"
    echo "  The ${cmd//_/:} Add or update user"
    echo ""
    echo "  $0 ${cmd//_/:} centos"
    echo "  $0 ${cmd//_/:} centos --uid=2000 --gid=2000 --password=pwd123 --group=wheel"
    echo ""
}

# Reads arguments options
function parse_user_arguments()
{
  # if [ $# -ne 0 ]; then
    local TEMP=`getopt -o p::,h --long help,uid::,gid::,home::,group::,password::,user:: -n "$0" -- "$@"`
    
	eval set -- "$TEMP"
    # extract options and their arguments into variables.
    while true ; do
        case "$1" in
            -h|--help) HELP=1 ; shift 1 ;;
            --uid) uid="-u ${2}" ; shift 2 ;;
            --gid) gid="-g ${2}" ; shift 2 ;;
            --home) home="-d ${2}" ; shift 2 ;;
            --password) password="${2}" ; shift 2 ;;
            --group) groups+="${2} "; shift 2 ;;
            --user) users+="${2} "; shift 2 ;;
            --) shift ; break ;;
            *) echo "Internal error! $1" ; exit 1 ;;
        esac
    done

    shift $(expr $OPTIND - 1 )
    _parameters=$@
    
    if [[ "1" == $HELP ]]; 
    then
        user_usage
        exit 0
    fi
}

# 
function user_add() 
{
    set -e
    local HELP=0
    local home=
    local uid=
    local gid=
    local password=
    local groups=

    local _parameters=
    parse_user_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi

    username=$1


    if [[ -z "$username" ]]; 
    then
        echo "Commande invalide!"
        echo "    Required username"
        user_usage
        exit 1
    fi

    
    if [ ! $(getent group ${username}) ]; then 
        case `plateform` in 
            alpine) addgroup $gid ${username};;
            *) groupadd $gid ${username};;
        esac
    # else
    #     groupmod -g $USER_UID ${username};
    fi


    if ! getent passwd ${username} > /dev/null 2>&1; then
        case `plateform` in 
            alpine) adduser --shell /bin/bash $uid -g ${username} $home ${username};;
            *) useradd --shell /bin/bash $uid -g ${username} $home ${username};;
        esac
    else
        case `plateform` in 
            alpine) moduser --shell /bin/bash $uid -g ${username} ${username};;
            *) usermod --shell /bin/bash $uid -g ${username} ${username};;
        esac
    fi
    
    for group in $groups
    do  
        # checks if user exit
        if ! $(getent group ${group})
        then
            case `plateform` in 
                alpine) addgroup $group;;
                *) groupadd $group;;
            esac
            
            # echo "Group '$group' does not exist: group created!"
        fi
        
        
        case `plateform` in 
            alpine) usermod -aG $group ${username};;
            *) usermod -aG $group ${username};;
        esac
    done

    if [ -n "$password" ]; then
        case `plateform` in 
            redhat) echo "${password}" | passwd $username --stdin ;;
            debian) echo -e "${password}" | passwd $username ;;
            *) echo -e "${password}" | passwd $username ;;
        esac
    fi
#     for user in $_USERS
#     do  
#     done

}

# 
function user_update() 
{
    set -e
    local help=0
    local home=
    local uid=
    local gid=
    local password=
    local groups=

    local _parameters=
    parse_user_arguments $@ 
    if [ -n "$_parameters" ]; then set $_parameters; fi

    username=$1

    if [[ -z "$username" ]]; 
    then
        echo "Commande invalide!"
        echo "    Required username"
        user_usage
        exit 1
    fi
    
    if getent passwd ${username} > /dev/null 2>&1; then
        echo "Commande invalide!"
        echo "    user '$username' not found"
        exit 1
    fi

    if [ -n "$uid" ] ; then
        case `plateform` in 
            redhat) echo "${password}" | passwd $username --stdin ;;
            debian) echo -e "${password}" | passwd $username ;;
            *) echo -e "${password}" | passwd $username ;;
        esac
        usermod $uid ${username};
    fi
    if [ -n "$gid" ] ; then
        usermod $gid ${username};
    fi
    
    for group in $groups
    do  
        # checks if user exit
        if ! $(getent group ${group})
        then
            groupadd $group               
        fi
        usermod -aG $group ${username}
    done

    if [ -n "$password" ]; then
        echo "${password}" | passwd $username --stdin 
    fi
}
    
    
# # Configuration des comptes administrateurs

# # if [ -n "${ROOT_PASSWORD}" ];
# # then
# #     echo "${ROOT_PASSWORD}" | passwd "root" --stdin ; 
# # fi ;

# # # Sets user primary group
# # if [ ! $(getent group ${GROUP_ADMIN}) ]; 
# # then 
# #     groupadd ${GROUP_ADMIN}; 
# # fi 

# # usermod  -aG ${GROUP_ADMIN} root

# # if [ -n "$GROUP_ADMIN_UID" ]; 
# # then 
# #     groupmod -g $GROUP_ADMIN_UID ${GROUP_ADMIN}; 
# # fi


# _USER=${1}
# _USER_UID=${2}

# #
# # Create user account if not exist


# # ssh
# if ! getent passwd ${_USER} > /dev/null 2>&1; 
# then
        
#     if [ "$_USER" == "${GROUP_ADMIN}" ]; 
#     then
#         useradd -g ${_USER} ${_USER};
#     else
#         useradd ${_USER};
#     fi

    
# fi

# usermod $_USER -aG ${GROUP_ADMIN}

# if [ -n "$_USER_UID" ];
# then
#     usermod -u $_USER_UID ${_USER};
# fi
		
# # Sets user's password
# # if [ -n "${USER_PASSWORD}" ];
# # then 
# #     echo "${USER_PASSWORD}" | passwd "${_USER}" --stdin ;
# # fi;


# # ssh
# if getent passwd ${_USER} > /dev/null 2>&1; 
# then
#     if [[ -d $CONFIG_DIR/.${_USER}/.ssh ]]
#     then
#         mv $CONFIG_DIR/.${_USER}/.ssh /home/${_USER}/.ssh
#         chmod 600 /home/${_USER}/.ssh/*
#         chmod 700 /home/${_USER}/.ssh
#         if [ -f /home/${_USER}/.ssh/config ]; then chmod 644 /home/${_USER}/.ssh/config; fi
#     fi
    
#     if [ -f $CONFIG_DIR/.${_USER}/.gitconfig ]; then 
#         mv $CONFIG_DIR/.${_USER}/.gitconfig /home/${_USER}/;
#     fi

#     if [[ -d $CONFIG_DIR/.${_USER} ]]
#     then
#         rm -rf $CONFIG_DIR/.${_USER}
#     fi&_2(2Sotl/z!
# fi

# chown ${_USER}:${_USER} -R /home/${_USER}/#!/bin/bash
#
# Scripts cpm: Csimeu Package Manager
#
#   Emploi:     
#
##########   INSTANCE DE PRODUCTION  ##########
#


# Stop on first error [duplicate]
if [ -f /etc/os-release ];
then 
    OS_NAME=$(plateform_name)
    OS_VERSION=$(plateform_version)
fi

mkdir -p /tmp/releases

# _home() {
#     echo ${0/cenr-cli/..}
# }

_self_update() {
    cd ${CPM_HOME:-/opt/cenr/cenr-cli} && git pull origin master
}

_run_cpm() {
    set -e
    if [ $# -eq 0 ]; then
        # Commande invalide
        echo "Commande invalide!"
        exit 1
    fi

    cmd=$1

    case "$cmd" in
        "cc:dev")
            shift
            symfony_cc --env=dev $@
            exit 0;
            ;;
        "cc" | "symfony:cc")
            shift
            symfony_cc $@
            exit 0;
            ;;
        "self-update")
            shift
            _self_update $@
            exit 0;
            ;;
        "node:configure")
            shift
            $(awk -F= '/^ID=/{print $2}' /etc/os-release)-vm-setup.sh $@
            exit 0;
            ;;
        *)
            cmd="${cmd//:/_}" 
            shift
            $cmd $@
        ;;
    esac

}

## detect if a script is being sourced or not
if [[ $(basename $0) == 'cpm' ]]
then
	_run_cpm "$@"
fi

